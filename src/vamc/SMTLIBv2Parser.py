# Generated from .\SMTLIBv2.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,113,1093,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,0,1,1,1,1,1,
        1,1,2,1,2,1,3,1,3,3,3,203,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,3,
        7,213,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,13,3,13,228,8,13,1,14,1,14,1,14,1,14,1,14,3,14,235,8,14,1,15,1,
        15,1,15,1,15,1,15,5,15,242,8,15,10,15,12,15,245,9,15,1,15,3,15,248,
        8,15,1,16,1,16,3,16,252,8,16,1,17,1,17,1,17,1,17,1,17,4,17,259,8,
        17,11,17,12,17,260,1,17,1,17,3,17,265,8,17,1,18,1,18,1,18,1,18,5,
        18,271,8,18,10,18,12,18,274,9,18,1,18,3,18,277,8,18,1,19,1,19,1,
        19,1,19,3,19,283,8,19,1,20,1,20,1,20,1,20,4,20,289,8,20,11,20,12,
        20,290,1,20,1,20,3,20,295,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        3,21,304,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,4,24,320,8,24,11,24,12,24,321,1,24,1,24,3,24,
        326,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,4,26,
        338,8,26,11,26,12,26,339,1,26,1,26,1,26,1,26,1,26,1,26,4,26,348,
        8,26,11,26,12,26,349,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,26,
        360,8,26,11,26,12,26,361,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        4,26,372,8,26,11,26,12,26,373,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,4,26,385,8,26,11,26,12,26,386,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,4,26,396,8,26,11,26,12,26,397,1,26,1,26,3,26,402,8,26,
        1,27,1,27,1,27,1,27,5,27,408,8,27,10,27,12,27,411,9,27,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,29,5,29,421,8,29,10,29,12,29,424,9,29,
        1,29,1,29,1,29,1,29,1,29,1,29,5,29,432,8,29,10,29,12,29,435,9,29,
        1,29,1,29,1,29,1,29,1,29,4,29,442,8,29,11,29,12,29,443,1,29,5,29,
        447,8,29,10,29,12,29,450,9,29,1,29,1,29,3,29,454,8,29,1,30,1,30,
        1,30,1,30,1,30,4,30,461,8,30,11,30,12,30,462,1,30,1,30,1,30,1,30,
        4,30,469,8,30,11,30,12,30,470,1,30,5,30,474,8,30,10,30,12,30,477,
        9,30,1,30,1,30,1,30,3,30,482,8,30,1,31,1,31,1,31,4,31,487,8,31,11,
        31,12,31,488,1,31,1,31,1,31,1,31,1,31,4,31,496,8,31,11,31,12,31,
        497,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,513,8,31,1,32,1,32,1,32,1,32,4,32,519,8,32,11,32,12,32,
        520,1,32,1,32,1,33,1,33,1,33,4,33,528,8,33,11,33,12,33,529,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,543,8,33,
        1,34,1,34,1,34,1,34,4,34,549,8,34,11,34,12,34,550,1,34,1,34,1,35,
        1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,5,37,
        568,8,37,10,37,12,37,571,9,37,1,37,1,37,1,38,1,38,4,38,577,8,38,
        11,38,12,38,578,1,38,1,38,1,38,1,38,1,38,1,38,4,38,587,8,38,11,38,
        12,38,588,1,38,1,38,1,38,4,38,594,8,38,11,38,12,38,595,1,38,1,38,
        1,38,3,38,601,8,38,1,39,1,39,1,39,1,39,5,39,607,8,39,10,39,12,39,
        610,9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,5,40,619,8,40,10,40,
        12,40,622,9,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,
        3,41,634,8,41,1,42,5,42,637,8,42,10,42,12,42,640,9,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
        1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,
        1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,
        1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,4,73,731,8,73,11,73,
        12,73,732,1,73,1,73,1,73,4,73,738,8,73,11,73,12,73,739,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,5,73,750,8,73,10,73,12,73,753,9,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,4,73,779,
        8,73,11,73,12,73,780,1,73,1,73,1,73,4,73,786,8,73,11,73,12,73,787,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,798,8,73,10,73,12,73,
        801,9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,4,73,854,8,73,11,73,12,73,855,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,3,73,894,8,73,1,74,1,74,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
        927,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,937,8,76,1,
        77,1,77,1,78,1,78,1,78,3,78,944,8,78,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,4,79,960,8,79,11,79,12,
        79,961,1,79,1,79,1,79,4,79,967,8,79,11,79,12,79,968,1,79,1,79,1,
        79,3,79,974,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,1,80,3,80,989,8,80,1,81,1,81,1,81,1,81,1,81,1,82,1,
        82,1,82,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,5,85,1007,8,85,10,
        85,12,85,1010,9,85,1,85,1,85,1,86,1,86,5,86,1016,8,86,10,86,12,86,
        1019,9,86,1,86,1,86,1,87,1,87,4,87,1025,8,87,11,87,12,87,1026,1,
        87,1,87,1,88,1,88,5,88,1033,8,88,10,88,12,88,1036,9,88,1,88,1,88,
        1,89,1,89,1,90,1,90,1,91,1,91,5,91,1046,8,91,10,91,12,91,1049,9,
        91,1,91,1,91,1,92,1,92,5,92,1055,8,92,10,92,12,92,1058,9,92,1,92,
        1,92,1,93,1,93,4,93,1064,8,93,11,93,12,93,1065,1,93,1,93,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1081,8,94,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1091,8,95,1,95,0,0,96,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,0,7,1,0,53,65,1,0,7,22,1,0,71,111,3,0,57,57,63,63,65,65,2,0,
        11,11,19,19,2,0,9,9,12,12,3,0,16,16,20,20,22,22,1158,0,192,1,0,0,
        0,2,195,1,0,0,0,4,198,1,0,0,0,6,202,1,0,0,0,8,204,1,0,0,0,10,206,
        1,0,0,0,12,208,1,0,0,0,14,212,1,0,0,0,16,214,1,0,0,0,18,216,1,0,
        0,0,20,218,1,0,0,0,22,220,1,0,0,0,24,222,1,0,0,0,26,227,1,0,0,0,
        28,234,1,0,0,0,30,247,1,0,0,0,32,251,1,0,0,0,34,264,1,0,0,0,36,276,
        1,0,0,0,38,282,1,0,0,0,40,294,1,0,0,0,42,303,1,0,0,0,44,305,1,0,
        0,0,46,310,1,0,0,0,48,325,1,0,0,0,50,327,1,0,0,0,52,401,1,0,0,0,
        54,403,1,0,0,0,56,414,1,0,0,0,58,453,1,0,0,0,60,481,1,0,0,0,62,512,
        1,0,0,0,64,514,1,0,0,0,66,542,1,0,0,0,68,544,1,0,0,0,70,554,1,0,
        0,0,72,559,1,0,0,0,74,564,1,0,0,0,76,600,1,0,0,0,78,602,1,0,0,0,
        80,615,1,0,0,0,82,633,1,0,0,0,84,638,1,0,0,0,86,641,1,0,0,0,88,643,
        1,0,0,0,90,645,1,0,0,0,92,647,1,0,0,0,94,649,1,0,0,0,96,651,1,0,
        0,0,98,653,1,0,0,0,100,655,1,0,0,0,102,657,1,0,0,0,104,659,1,0,0,
        0,106,661,1,0,0,0,108,663,1,0,0,0,110,665,1,0,0,0,112,667,1,0,0,
        0,114,669,1,0,0,0,116,671,1,0,0,0,118,673,1,0,0,0,120,675,1,0,0,
        0,122,677,1,0,0,0,124,679,1,0,0,0,126,681,1,0,0,0,128,683,1,0,0,
        0,130,685,1,0,0,0,132,687,1,0,0,0,134,689,1,0,0,0,136,691,1,0,0,
        0,138,693,1,0,0,0,140,695,1,0,0,0,142,697,1,0,0,0,144,699,1,0,0,
        0,146,893,1,0,0,0,148,895,1,0,0,0,150,926,1,0,0,0,152,936,1,0,0,
        0,154,938,1,0,0,0,156,943,1,0,0,0,158,973,1,0,0,0,160,988,1,0,0,
        0,162,990,1,0,0,0,164,995,1,0,0,0,166,1000,1,0,0,0,168,1002,1,0,
        0,0,170,1004,1,0,0,0,172,1013,1,0,0,0,174,1022,1,0,0,0,176,1030,
        1,0,0,0,178,1039,1,0,0,0,180,1041,1,0,0,0,182,1043,1,0,0,0,184,1052,
        1,0,0,0,186,1061,1,0,0,0,188,1080,1,0,0,0,190,1090,1,0,0,0,192,193,
        3,84,42,0,193,194,5,0,0,1,194,1,1,0,0,0,195,196,3,190,95,0,196,197,
        5,0,0,1,197,3,1,0,0,0,198,199,7,0,0,0,199,5,1,0,0,0,200,203,3,10,
        5,0,201,203,5,112,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,7,1,0,
        0,0,204,205,5,6,0,0,205,9,1,0,0,0,206,207,7,1,0,0,207,11,1,0,0,0,
        208,209,7,2,0,0,209,13,1,0,0,0,210,213,3,6,3,0,211,213,3,8,4,0,212,
        210,1,0,0,0,212,211,1,0,0,0,213,15,1,0,0,0,214,215,5,66,0,0,215,
        17,1,0,0,0,216,217,5,69,0,0,217,19,1,0,0,0,218,219,5,68,0,0,219,
        21,1,0,0,0,220,221,5,67,0,0,221,23,1,0,0,0,222,223,5,5,0,0,223,25,
        1,0,0,0,224,228,3,12,6,0,225,226,5,70,0,0,226,228,3,6,3,0,227,224,
        1,0,0,0,227,225,1,0,0,0,228,27,1,0,0,0,229,235,3,16,8,0,230,235,
        3,18,9,0,231,235,3,20,10,0,232,235,3,22,11,0,233,235,3,24,12,0,234,
        229,1,0,0,0,234,230,1,0,0,0,234,231,1,0,0,0,234,232,1,0,0,0,234,
        233,1,0,0,0,235,29,1,0,0,0,236,248,3,28,14,0,237,248,3,14,7,0,238,
        248,3,26,13,0,239,243,5,2,0,0,240,242,3,30,15,0,241,240,1,0,0,0,
        242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,
        245,243,1,0,0,0,246,248,5,3,0,0,247,236,1,0,0,0,247,237,1,0,0,0,
        247,238,1,0,0,0,247,239,1,0,0,0,248,31,1,0,0,0,249,252,3,16,8,0,
        250,252,3,14,7,0,251,249,1,0,0,0,251,250,1,0,0,0,252,33,1,0,0,0,
        253,265,3,14,7,0,254,255,5,2,0,0,255,256,5,54,0,0,256,258,3,14,7,
        0,257,259,3,32,16,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,
        0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,5,3,0,0,263,265,1,0,
        0,0,264,253,1,0,0,0,264,254,1,0,0,0,265,35,1,0,0,0,266,277,3,28,
        14,0,267,277,3,14,7,0,268,272,5,2,0,0,269,271,3,30,15,0,270,269,
        1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,
        1,0,0,0,274,272,1,0,0,0,275,277,5,3,0,0,276,266,1,0,0,0,276,267,
        1,0,0,0,276,268,1,0,0,0,277,37,1,0,0,0,278,283,3,26,13,0,279,280,
        3,26,13,0,280,281,3,36,18,0,281,283,1,0,0,0,282,278,1,0,0,0,282,
        279,1,0,0,0,283,39,1,0,0,0,284,295,3,34,17,0,285,286,5,2,0,0,286,
        288,3,34,17,0,287,289,3,40,20,0,288,287,1,0,0,0,289,290,1,0,0,0,
        290,288,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,3,0,0,
        293,295,1,0,0,0,294,284,1,0,0,0,294,285,1,0,0,0,295,41,1,0,0,0,296,
        304,3,34,17,0,297,298,5,2,0,0,298,299,5,55,0,0,299,300,3,34,17,0,
        300,301,3,40,20,0,301,302,5,3,0,0,302,304,1,0,0,0,303,296,1,0,0,
        0,303,297,1,0,0,0,304,43,1,0,0,0,305,306,5,2,0,0,306,307,3,14,7,
        0,307,308,3,52,26,0,308,309,5,3,0,0,309,45,1,0,0,0,310,311,5,2,0,
        0,311,312,3,14,7,0,312,313,3,40,20,0,313,314,5,3,0,0,314,47,1,0,
        0,0,315,326,3,14,7,0,316,317,5,2,0,0,317,319,3,14,7,0,318,320,3,
        14,7,0,319,318,1,0,0,0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,
        0,0,0,322,323,1,0,0,0,323,324,5,3,0,0,324,326,1,0,0,0,325,315,1,
        0,0,0,325,316,1,0,0,0,326,49,1,0,0,0,327,328,5,2,0,0,328,329,3,48,
        24,0,329,330,3,52,26,0,330,331,5,3,0,0,331,51,1,0,0,0,332,402,3,
        28,14,0,333,402,3,42,21,0,334,335,5,2,0,0,335,337,3,42,21,0,336,
        338,3,52,26,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,339,
        340,1,0,0,0,340,341,1,0,0,0,341,342,5,3,0,0,342,402,1,0,0,0,343,
        344,5,2,0,0,344,345,5,61,0,0,345,347,5,2,0,0,346,348,3,44,22,0,347,
        346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,
        351,1,0,0,0,351,352,5,3,0,0,352,353,3,52,26,0,353,354,5,3,0,0,354,
        402,1,0,0,0,355,356,5,2,0,0,356,357,5,60,0,0,357,359,5,2,0,0,358,
        360,3,46,23,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,
        362,1,0,0,0,362,363,1,0,0,0,363,364,5,3,0,0,364,365,3,52,26,0,365,
        366,5,3,0,0,366,402,1,0,0,0,367,368,5,2,0,0,368,369,5,58,0,0,369,
        371,5,2,0,0,370,372,3,46,23,0,371,370,1,0,0,0,372,373,1,0,0,0,373,
        371,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,5,3,0,0,376,
        377,3,52,26,0,377,378,5,3,0,0,378,402,1,0,0,0,379,380,5,2,0,0,380,
        381,5,62,0,0,381,382,3,52,26,0,382,384,5,2,0,0,383,385,3,50,25,0,
        384,383,1,0,0,0,385,386,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,
        387,388,1,0,0,0,388,389,5,3,0,0,389,390,5,3,0,0,390,402,1,0,0,0,
        391,392,5,2,0,0,392,393,5,53,0,0,393,395,3,52,26,0,394,396,3,38,
        19,0,395,394,1,0,0,0,396,397,1,0,0,0,397,395,1,0,0,0,397,398,1,0,
        0,0,398,399,1,0,0,0,399,400,5,3,0,0,400,402,1,0,0,0,401,332,1,0,
        0,0,401,333,1,0,0,0,401,334,1,0,0,0,401,343,1,0,0,0,401,355,1,0,
        0,0,401,367,1,0,0,0,401,379,1,0,0,0,401,391,1,0,0,0,402,53,1,0,0,
        0,403,404,5,2,0,0,404,405,3,34,17,0,405,409,3,16,8,0,406,408,3,38,
        19,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,
        0,0,410,412,1,0,0,0,411,409,1,0,0,0,412,413,5,3,0,0,413,55,1,0,0,
        0,414,415,7,3,0,0,415,57,1,0,0,0,416,417,5,2,0,0,417,418,3,28,14,
        0,418,422,3,40,20,0,419,421,3,38,19,0,420,419,1,0,0,0,421,424,1,
        0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,
        0,0,0,425,426,5,3,0,0,426,454,1,0,0,0,427,428,5,2,0,0,428,429,3,
        56,28,0,429,433,3,40,20,0,430,432,3,38,19,0,431,430,1,0,0,0,432,
        435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,
        433,1,0,0,0,436,437,5,3,0,0,437,454,1,0,0,0,438,439,5,2,0,0,439,
        441,3,34,17,0,440,442,3,40,20,0,441,440,1,0,0,0,442,443,1,0,0,0,
        443,441,1,0,0,0,443,444,1,0,0,0,444,448,1,0,0,0,445,447,3,38,19,
        0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,
        0,449,451,1,0,0,0,450,448,1,0,0,0,451,452,5,3,0,0,452,454,1,0,0,
        0,453,416,1,0,0,0,453,427,1,0,0,0,453,438,1,0,0,0,454,59,1,0,0,0,
        455,482,3,58,29,0,456,457,5,2,0,0,457,458,5,64,0,0,458,460,5,2,0,
        0,459,461,3,14,7,0,460,459,1,0,0,0,461,462,1,0,0,0,462,460,1,0,0,
        0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,5,3,0,0,465,466,5,2,0,
        0,466,468,3,34,17,0,467,469,3,40,20,0,468,467,1,0,0,0,469,470,1,
        0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,475,1,0,0,0,472,474,3,
        38,19,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,
        1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,479,5,3,0,0,479,480,
        5,3,0,0,480,482,1,0,0,0,481,455,1,0,0,0,481,456,1,0,0,0,482,61,1,
        0,0,0,483,484,5,104,0,0,484,486,5,2,0,0,485,487,3,54,27,0,486,485,
        1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,490,
        1,0,0,0,490,491,5,3,0,0,491,513,1,0,0,0,492,493,5,80,0,0,493,495,
        5,2,0,0,494,496,3,60,30,0,495,494,1,0,0,0,496,497,1,0,0,0,497,495,
        1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,500,5,3,0,0,500,513,
        1,0,0,0,501,502,5,105,0,0,502,513,3,24,12,0,503,504,5,81,0,0,504,
        513,3,24,12,0,505,506,5,76,0,0,506,513,3,24,12,0,507,508,5,109,0,
        0,508,513,3,24,12,0,509,510,5,89,0,0,510,513,3,24,12,0,511,513,3,
        38,19,0,512,483,1,0,0,0,512,492,1,0,0,0,512,501,1,0,0,0,512,503,
        1,0,0,0,512,505,1,0,0,0,512,507,1,0,0,0,512,509,1,0,0,0,512,511,
        1,0,0,0,513,63,1,0,0,0,514,515,5,2,0,0,515,516,5,18,0,0,516,518,
        3,14,7,0,517,519,3,62,31,0,518,517,1,0,0,0,519,520,1,0,0,0,520,518,
        1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,5,3,0,0,523,65,1,
        0,0,0,524,525,5,108,0,0,525,527,5,2,0,0,526,528,3,14,7,0,527,526,
        1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,531,
        1,0,0,0,531,532,5,3,0,0,532,543,1,0,0,0,533,534,5,84,0,0,534,543,
        3,24,12,0,535,536,5,79,0,0,536,543,3,24,12,0,537,538,5,109,0,0,538,
        543,3,24,12,0,539,540,5,89,0,0,540,543,3,24,12,0,541,543,3,38,19,
        0,542,524,1,0,0,0,542,533,1,0,0,0,542,535,1,0,0,0,542,537,1,0,0,
        0,542,539,1,0,0,0,542,541,1,0,0,0,543,67,1,0,0,0,544,545,5,2,0,0,
        545,546,5,14,0,0,546,548,3,14,7,0,547,549,3,66,33,0,548,547,1,0,
        0,0,549,550,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,552,1,0,
        0,0,552,553,5,3,0,0,553,69,1,0,0,0,554,555,5,2,0,0,555,556,3,14,
        7,0,556,557,3,16,8,0,557,558,5,3,0,0,558,71,1,0,0,0,559,560,5,2,
        0,0,560,561,3,14,7,0,561,562,3,40,20,0,562,563,5,3,0,0,563,73,1,
        0,0,0,564,565,5,2,0,0,565,569,3,14,7,0,566,568,3,72,36,0,567,566,
        1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,572,
        1,0,0,0,571,569,1,0,0,0,572,573,5,3,0,0,573,75,1,0,0,0,574,576,5,
        2,0,0,575,577,3,74,37,0,576,575,1,0,0,0,577,578,1,0,0,0,578,576,
        1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,3,0,0,581,601,
        1,0,0,0,582,583,5,2,0,0,583,584,5,64,0,0,584,586,5,2,0,0,585,587,
        3,14,7,0,586,585,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,
        1,0,0,0,589,590,1,0,0,0,590,591,5,3,0,0,591,593,5,2,0,0,592,594,
        3,74,37,0,593,592,1,0,0,0,594,595,1,0,0,0,595,593,1,0,0,0,595,596,
        1,0,0,0,596,597,1,0,0,0,597,598,5,3,0,0,598,599,5,3,0,0,599,601,
        1,0,0,0,600,574,1,0,0,0,600,582,1,0,0,0,601,77,1,0,0,0,602,603,5,
        2,0,0,603,604,3,14,7,0,604,608,5,2,0,0,605,607,3,46,23,0,606,605,
        1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,
        1,0,0,0,610,608,1,0,0,0,611,612,5,3,0,0,612,613,3,40,20,0,613,614,
        5,3,0,0,614,79,1,0,0,0,615,616,3,14,7,0,616,620,5,2,0,0,617,619,
        3,46,23,0,618,617,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,
        1,0,0,0,621,623,1,0,0,0,622,620,1,0,0,0,623,624,5,3,0,0,624,625,
        3,40,20,0,625,626,3,52,26,0,626,81,1,0,0,0,627,634,3,14,7,0,628,
        629,5,2,0,0,629,630,5,7,0,0,630,631,3,14,7,0,631,632,5,3,0,0,632,
        634,1,0,0,0,633,627,1,0,0,0,633,628,1,0,0,0,634,83,1,0,0,0,635,637,
        3,146,73,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,
        1,0,0,0,639,85,1,0,0,0,640,638,1,0,0,0,641,642,5,23,0,0,642,87,1,
        0,0,0,643,644,5,24,0,0,644,89,1,0,0,0,645,646,5,25,0,0,646,91,1,
        0,0,0,647,648,5,26,0,0,648,93,1,0,0,0,649,650,5,27,0,0,650,95,1,
        0,0,0,651,652,5,28,0,0,652,97,1,0,0,0,653,654,5,29,0,0,654,99,1,
        0,0,0,655,656,5,30,0,0,656,101,1,0,0,0,657,658,5,31,0,0,658,103,
        1,0,0,0,659,660,5,32,0,0,660,105,1,0,0,0,661,662,5,33,0,0,662,107,
        1,0,0,0,663,664,5,34,0,0,664,109,1,0,0,0,665,666,5,35,0,0,666,111,
        1,0,0,0,667,668,5,36,0,0,668,113,1,0,0,0,669,670,5,37,0,0,670,115,
        1,0,0,0,671,672,5,38,0,0,672,117,1,0,0,0,673,674,5,39,0,0,674,119,
        1,0,0,0,675,676,5,40,0,0,676,121,1,0,0,0,677,678,5,41,0,0,678,123,
        1,0,0,0,679,680,5,42,0,0,680,125,1,0,0,0,681,682,5,43,0,0,682,127,
        1,0,0,0,683,684,5,44,0,0,684,129,1,0,0,0,685,686,5,45,0,0,686,131,
        1,0,0,0,687,688,5,46,0,0,688,133,1,0,0,0,689,690,5,47,0,0,690,135,
        1,0,0,0,691,692,5,48,0,0,692,137,1,0,0,0,693,694,5,49,0,0,694,139,
        1,0,0,0,695,696,5,50,0,0,696,141,1,0,0,0,697,698,5,51,0,0,698,143,
        1,0,0,0,699,700,5,52,0,0,700,145,1,0,0,0,701,702,5,2,0,0,702,703,
        3,86,43,0,703,704,3,52,26,0,704,705,5,3,0,0,705,894,1,0,0,0,706,
        707,5,2,0,0,707,708,3,88,44,0,708,709,5,3,0,0,709,894,1,0,0,0,710,
        711,5,2,0,0,711,712,3,90,45,0,712,713,5,3,0,0,713,894,1,0,0,0,714,
        715,5,2,0,0,715,716,3,92,46,0,716,717,3,14,7,0,717,718,3,40,20,0,
        718,719,5,3,0,0,719,894,1,0,0,0,720,721,5,2,0,0,721,722,3,94,47,
        0,722,723,3,14,7,0,723,724,3,76,38,0,724,725,5,3,0,0,725,894,1,0,
        0,0,726,727,5,2,0,0,727,728,3,96,48,0,728,730,5,2,0,0,729,731,3,
        70,35,0,730,729,1,0,0,0,731,732,1,0,0,0,732,730,1,0,0,0,732,733,
        1,0,0,0,733,734,1,0,0,0,734,735,5,3,0,0,735,737,5,2,0,0,736,738,
        3,76,38,0,737,736,1,0,0,0,738,739,1,0,0,0,739,737,1,0,0,0,739,740,
        1,0,0,0,740,741,1,0,0,0,741,742,5,3,0,0,742,743,5,3,0,0,743,894,
        1,0,0,0,744,745,5,2,0,0,745,746,3,98,49,0,746,747,3,14,7,0,747,751,
        5,2,0,0,748,750,3,40,20,0,749,748,1,0,0,0,750,753,1,0,0,0,751,749,
        1,0,0,0,751,752,1,0,0,0,752,754,1,0,0,0,753,751,1,0,0,0,754,755,
        5,3,0,0,755,756,3,40,20,0,756,757,5,3,0,0,757,894,1,0,0,0,758,759,
        5,2,0,0,759,760,3,100,50,0,760,761,3,14,7,0,761,762,3,16,8,0,762,
        763,5,3,0,0,763,894,1,0,0,0,764,765,5,2,0,0,765,766,3,102,51,0,766,
        767,3,80,40,0,767,768,5,3,0,0,768,894,1,0,0,0,769,770,5,2,0,0,770,
        771,3,104,52,0,771,772,3,80,40,0,772,773,5,3,0,0,773,894,1,0,0,0,
        774,775,5,2,0,0,775,776,3,106,53,0,776,778,5,2,0,0,777,779,3,78,
        39,0,778,777,1,0,0,0,779,780,1,0,0,0,780,778,1,0,0,0,780,781,1,0,
        0,0,781,782,1,0,0,0,782,783,5,3,0,0,783,785,5,2,0,0,784,786,3,52,
        26,0,785,784,1,0,0,0,786,787,1,0,0,0,787,785,1,0,0,0,787,788,1,0,
        0,0,788,789,1,0,0,0,789,790,5,3,0,0,790,791,5,3,0,0,791,894,1,0,
        0,0,792,793,5,2,0,0,793,794,3,108,54,0,794,795,3,14,7,0,795,799,
        5,2,0,0,796,798,3,14,7,0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,
        1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,799,1,0,0,0,802,803,
        5,3,0,0,803,804,3,40,20,0,804,805,5,3,0,0,805,894,1,0,0,0,806,807,
        5,2,0,0,807,808,3,110,55,0,808,809,3,24,12,0,809,810,5,3,0,0,810,
        894,1,0,0,0,811,812,5,2,0,0,812,813,3,112,56,0,813,814,5,3,0,0,814,
        894,1,0,0,0,815,816,5,2,0,0,816,817,3,114,57,0,817,818,5,3,0,0,818,
        894,1,0,0,0,819,820,5,2,0,0,820,821,3,116,58,0,821,822,5,3,0,0,822,
        894,1,0,0,0,823,824,5,2,0,0,824,825,3,118,59,0,825,826,3,152,76,
        0,826,827,5,3,0,0,827,894,1,0,0,0,828,829,5,2,0,0,829,830,3,120,
        60,0,830,831,5,3,0,0,831,894,1,0,0,0,832,833,5,2,0,0,833,834,3,122,
        61,0,834,835,3,26,13,0,835,836,5,3,0,0,836,894,1,0,0,0,837,838,5,
        2,0,0,838,839,3,124,62,0,839,840,5,3,0,0,840,894,1,0,0,0,841,842,
        5,2,0,0,842,843,3,126,63,0,843,844,5,3,0,0,844,894,1,0,0,0,845,846,
        5,2,0,0,846,847,3,128,64,0,847,848,5,3,0,0,848,894,1,0,0,0,849,850,
        5,2,0,0,850,851,3,130,65,0,851,853,5,2,0,0,852,854,3,52,26,0,853,
        852,1,0,0,0,854,855,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,
        857,1,0,0,0,857,858,5,3,0,0,858,859,5,3,0,0,859,894,1,0,0,0,860,
        861,5,2,0,0,861,862,3,132,66,0,862,863,3,16,8,0,863,864,5,3,0,0,
        864,894,1,0,0,0,865,866,5,2,0,0,866,867,3,134,67,0,867,868,3,16,
        8,0,868,869,5,3,0,0,869,894,1,0,0,0,870,871,5,2,0,0,871,872,3,136,
        68,0,872,873,5,3,0,0,873,894,1,0,0,0,874,875,5,2,0,0,875,876,3,138,
        69,0,876,877,5,3,0,0,877,894,1,0,0,0,878,879,5,2,0,0,879,880,3,140,
        70,0,880,881,3,38,19,0,881,882,5,3,0,0,882,894,1,0,0,0,883,884,5,
        2,0,0,884,885,3,142,71,0,885,886,3,14,7,0,886,887,5,3,0,0,887,894,
        1,0,0,0,888,889,5,2,0,0,889,890,3,144,72,0,890,891,3,150,75,0,891,
        892,5,3,0,0,892,894,1,0,0,0,893,701,1,0,0,0,893,706,1,0,0,0,893,
        710,1,0,0,0,893,714,1,0,0,0,893,720,1,0,0,0,893,726,1,0,0,0,893,
        744,1,0,0,0,893,758,1,0,0,0,893,764,1,0,0,0,893,769,1,0,0,0,893,
        774,1,0,0,0,893,792,1,0,0,0,893,806,1,0,0,0,893,811,1,0,0,0,893,
        815,1,0,0,0,893,819,1,0,0,0,893,823,1,0,0,0,893,828,1,0,0,0,893,
        832,1,0,0,0,893,837,1,0,0,0,893,841,1,0,0,0,893,845,1,0,0,0,893,
        849,1,0,0,0,893,860,1,0,0,0,893,865,1,0,0,0,893,870,1,0,0,0,893,
        874,1,0,0,0,893,878,1,0,0,0,893,883,1,0,0,0,893,888,1,0,0,0,894,
        147,1,0,0,0,895,896,7,4,0,0,896,149,1,0,0,0,897,898,5,77,0,0,898,
        927,3,24,12,0,899,900,5,82,0,0,900,927,3,148,74,0,901,902,5,83,0,
        0,902,927,3,148,74,0,903,904,5,91,0,0,904,927,3,148,74,0,905,906,
        5,92,0,0,906,927,3,148,74,0,907,908,5,93,0,0,908,927,3,148,74,0,
        909,910,5,94,0,0,910,927,3,148,74,0,911,912,5,95,0,0,912,927,3,148,
        74,0,913,914,5,96,0,0,914,927,3,148,74,0,915,916,5,97,0,0,916,927,
        3,148,74,0,917,918,5,98,0,0,918,927,3,16,8,0,919,920,5,100,0,0,920,
        927,3,24,12,0,921,922,5,101,0,0,922,927,3,16,8,0,923,924,5,110,0,
        0,924,927,3,16,8,0,925,927,3,38,19,0,926,897,1,0,0,0,926,899,1,0,
        0,0,926,901,1,0,0,0,926,903,1,0,0,0,926,905,1,0,0,0,926,907,1,0,
        0,0,926,909,1,0,0,0,926,911,1,0,0,0,926,913,1,0,0,0,926,915,1,0,
        0,0,926,917,1,0,0,0,926,919,1,0,0,0,926,921,1,0,0,0,926,923,1,0,
        0,0,926,925,1,0,0,0,927,151,1,0,0,0,928,937,5,71,0,0,929,937,5,72,
        0,0,930,937,5,73,0,0,931,937,5,78,0,0,932,937,5,88,0,0,933,937,5,
        99,0,0,934,937,5,111,0,0,935,937,3,26,13,0,936,928,1,0,0,0,936,929,
        1,0,0,0,936,930,1,0,0,0,936,931,1,0,0,0,936,932,1,0,0,0,936,933,
        1,0,0,0,936,934,1,0,0,0,936,935,1,0,0,0,937,153,1,0,0,0,938,939,
        7,5,0,0,939,155,1,0,0,0,940,944,5,15,0,0,941,944,5,13,0,0,942,944,
        3,30,15,0,943,940,1,0,0,0,943,941,1,0,0,0,943,942,1,0,0,0,944,157,
        1,0,0,0,945,946,5,2,0,0,946,947,5,31,0,0,947,948,3,80,40,0,948,949,
        5,3,0,0,949,974,1,0,0,0,950,951,5,2,0,0,951,952,5,32,0,0,952,953,
        3,80,40,0,953,954,5,3,0,0,954,974,1,0,0,0,955,956,5,2,0,0,956,957,
        5,33,0,0,957,959,5,2,0,0,958,960,3,78,39,0,959,958,1,0,0,0,960,961,
        1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,964,
        5,3,0,0,964,966,5,2,0,0,965,967,3,52,26,0,966,965,1,0,0,0,967,968,
        1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,971,
        5,3,0,0,971,972,5,3,0,0,972,974,1,0,0,0,973,945,1,0,0,0,973,950,
        1,0,0,0,973,955,1,0,0,0,974,159,1,0,0,0,975,976,5,72,0,0,976,989,
        3,16,8,0,977,978,5,73,0,0,978,989,3,24,12,0,979,980,5,78,0,0,980,
        989,3,154,77,0,981,982,5,88,0,0,982,989,3,24,12,0,983,984,5,99,0,
        0,984,989,3,156,78,0,985,986,5,111,0,0,986,989,3,24,12,0,987,989,
        3,38,19,0,988,975,1,0,0,0,988,977,1,0,0,0,988,979,1,0,0,0,988,981,
        1,0,0,0,988,983,1,0,0,0,988,985,1,0,0,0,988,987,1,0,0,0,989,161,
        1,0,0,0,990,991,5,2,0,0,991,992,3,52,26,0,992,993,3,52,26,0,993,
        994,5,3,0,0,994,163,1,0,0,0,995,996,5,2,0,0,996,997,3,14,7,0,997,
        998,3,148,74,0,998,999,5,3,0,0,999,165,1,0,0,0,1000,1001,7,6,0,0,
        1001,167,1,0,0,0,1002,1003,3,24,12,0,1003,169,1,0,0,0,1004,1008,
        5,2,0,0,1005,1007,3,52,26,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,
        1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,
        1,0,0,0,1011,1012,5,3,0,0,1012,171,1,0,0,0,1013,1017,5,2,0,0,1014,
        1016,3,164,82,0,1015,1014,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,
        0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1017,1,0,0,0,1020,
        1021,5,3,0,0,1021,173,1,0,0,0,1022,1024,5,2,0,0,1023,1025,3,160,
        80,0,1024,1023,1,0,0,0,1025,1026,1,0,0,0,1026,1024,1,0,0,0,1026,
        1027,1,0,0,0,1027,1028,1,0,0,0,1028,1029,5,3,0,0,1029,175,1,0,0,
        0,1030,1034,5,2,0,0,1031,1033,3,158,79,0,1032,1031,1,0,0,0,1033,
        1036,1,0,0,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1037,1,0,0,
        0,1036,1034,1,0,0,0,1037,1038,5,3,0,0,1038,177,1,0,0,0,1039,1040,
        3,36,18,0,1040,179,1,0,0,0,1041,1042,3,30,15,0,1042,181,1,0,0,0,
        1043,1047,5,2,0,0,1044,1046,3,14,7,0,1045,1044,1,0,0,0,1046,1049,
        1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,1049,
        1047,1,0,0,0,1050,1051,5,3,0,0,1051,183,1,0,0,0,1052,1056,5,2,0,
        0,1053,1055,3,14,7,0,1054,1053,1,0,0,0,1055,1058,1,0,0,0,1056,1054,
        1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,
        1060,5,3,0,0,1060,185,1,0,0,0,1061,1063,5,2,0,0,1062,1064,3,162,
        81,0,1063,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1063,1,0,0,0,1065,
        1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,5,3,0,0,1068,187,1,0,0,
        0,1069,1081,3,166,83,0,1070,1081,3,168,84,0,1071,1081,3,170,85,0,
        1072,1081,3,172,86,0,1073,1081,3,174,87,0,1074,1081,3,176,88,0,1075,
        1081,3,178,89,0,1076,1081,3,180,90,0,1077,1081,3,182,91,0,1078,1081,
        3,184,92,0,1079,1081,3,186,93,0,1080,1069,1,0,0,0,1080,1070,1,0,
        0,0,1080,1071,1,0,0,0,1080,1072,1,0,0,0,1080,1073,1,0,0,0,1080,1074,
        1,0,0,0,1080,1075,1,0,0,0,1080,1076,1,0,0,0,1080,1077,1,0,0,0,1080,
        1078,1,0,0,0,1080,1079,1,0,0,0,1081,189,1,0,0,0,1082,1091,5,17,0,
        0,1083,1091,3,188,94,0,1084,1091,5,21,0,0,1085,1086,5,2,0,0,1086,
        1087,5,10,0,0,1087,1088,3,24,12,0,1088,1089,5,3,0,0,1089,1091,1,
        0,0,0,1090,1082,1,0,0,0,1090,1083,1,0,0,0,1090,1084,1,0,0,0,1090,
        1085,1,0,0,0,1091,191,1,0,0,0,74,202,212,227,234,243,247,251,260,
        264,272,276,282,290,294,303,321,325,339,349,361,373,386,397,401,
        409,422,433,443,448,453,462,470,475,481,488,497,512,520,529,542,
        550,569,578,588,595,600,608,620,633,638,732,739,751,780,787,799,
        855,893,926,936,943,961,968,973,988,1008,1017,1026,1034,1047,1056,
        1065,1080,1090
    ]

class SMTLIBv2Parser ( Parser ):

    grammarFileName = "SMTLIBv2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'('", "')'", "';'", "<INVALID>", 
                     "<INVALID>", "'not'", "'Bool'", "'continued-execution'", 
                     "'error'", "'false'", "'immediate-exit'", "'incomplete'", 
                     "'logic'", "'memout'", "'sat'", "'success'", "'theory'", 
                     "'true'", "'unknown'", "'unsupported'", "'unsat'", 
                     "'assert'", "'check-sat'", "'check-sat-assuming'", 
                     "'declare-const'", "'declare-datatype'", "'declare-datatypes'", 
                     "'declare-fun'", "'declare-sort'", "'define-fun'", 
                     "'define-fun-rec'", "'define-funs-rec'", "'define-sort'", 
                     "'echo'", "'exit'", "'get-assertions'", "'get-assignment'", 
                     "'get-info'", "'get-model'", "'get-option'", "'get-proof'", 
                     "'get-unsat-assumptions'", "'get-unsat-core'", "'get-value'", 
                     "'pop'", "'push'", "'reset'", "'reset-assertions'", 
                     "'set-info'", "'set-logic'", "'set-option'", "'!'", 
                     "'_'", "'as'", "'BINARY'", "'DECIMAL'", "'exists'", 
                     "'HEXADECIMAL'", "'forall'", "'let'", "'match'", "'NUMERAL'", 
                     "'par'", "'string'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "':all-statistics'", "':assertion-stack-levels'", 
                     "':authors'", "':category'", "':chainable'", "':definition'", 
                     "':diagnostic-output-channel'", "':error-behavior'", 
                     "':extensions'", "':funs'", "':funs-description'", 
                     "':global-declarations'", "':interactive-mode'", "':language'", 
                     "':left-assoc'", "':license'", "':named'", "':name'", 
                     "':notes'", "':pattern'", "':print-success'", "':produce-assertions'", 
                     "':produce-assignments'", "':produce-models'", "':produce-proofs'", 
                     "':produce-unsat-assumptions'", "':produce-unsat-cores'", 
                     "':random-seed'", "':reason-unknown'", "':regular-output-channel'", 
                     "':reproducible-resource-limit'", "':right-assoc'", 
                     "':smt-lib-version'", "':sorts'", "':sorts-description'", 
                     "':source'", "':status'", "':theories'", "':values'", 
                     "':verbosity'", "':version'" ]

    symbolicNames = [ "<INVALID>", "Comment", "ParOpen", "ParClose", "Semicolon", 
                      "String", "QuotedSymbol", "PS_Not", "PS_Bool", "PS_ContinuedExecution", 
                      "PS_Error", "PS_False", "PS_ImmediateExit", "PS_Incomplete", 
                      "PS_Logic", "PS_Memout", "PS_Sat", "PS_Success", "PS_Theory", 
                      "PS_True", "PS_Unknown", "PS_Unsupported", "PS_Unsat", 
                      "CMD_Assert", "CMD_CheckSat", "CMD_CheckSatAssuming", 
                      "CMD_DeclareConst", "CMD_DeclareDatatype", "CMD_DeclareDatatypes", 
                      "CMD_DeclareFun", "CMD_DeclareSort", "CMD_DefineFun", 
                      "CMD_DefineFunRec", "CMD_DefineFunsRec", "CMD_DefineSort", 
                      "CMD_Echo", "CMD_Exit", "CMD_GetAssertions", "CMD_GetAssignment", 
                      "CMD_GetInfo", "CMD_GetModel", "CMD_GetOption", "CMD_GetProof", 
                      "CMD_GetUnsatAssumptions", "CMD_GetUnsatCore", "CMD_GetValue", 
                      "CMD_Pop", "CMD_Push", "CMD_Reset", "CMD_ResetAssertions", 
                      "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", "GRW_Exclamation", 
                      "GRW_Underscore", "GRW_As", "GRW_Binary", "GRW_Decimal", 
                      "GRW_Exists", "GRW_Hexadecimal", "GRW_Forall", "GRW_Let", 
                      "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
                      "Numeral", "Binary", "HexDecimal", "Decimal", "Colon", 
                      "PK_AllStatistics", "PK_AssertionStackLevels", "PK_Authors", 
                      "PK_Category", "PK_Chainable", "PK_Definition", "PK_DiagnosticOutputChannel", 
                      "PK_ErrorBehaviour", "PK_Extension", "PK_Funs", "PK_FunsDescription", 
                      "PK_GlobalDeclarations", "PK_InteractiveMode", "PK_Language", 
                      "PK_LeftAssoc", "PK_License", "PK_Named", "PK_Name", 
                      "PK_Notes", "PK_Pattern", "PK_PrintSuccess", "PK_ProduceAssertions", 
                      "PK_ProduceAssignments", "PK_ProduceModels", "PK_ProduceProofs", 
                      "PK_ProduceUnsatAssumptions", "PK_ProduceUnsatCores", 
                      "PK_RandomSeed", "PK_ReasonUnknown", "PK_RegularOutputChannel", 
                      "PK_ReproducibleResourceLimit", "PK_RightAssoc", "PK_SmtLibVersion", 
                      "PK_Sorts", "PK_SortsDescription", "PK_Source", "PK_Status", 
                      "PK_Theories", "PK_Values", "PK_Verbosity", "PK_Version", 
                      "UndefinedSymbol", "WS" ]

    RULE_start = 0
    RULE_response = 1
    RULE_generalReservedWord = 2
    RULE_simpleSymbol = 3
    RULE_quotedSymbol = 4
    RULE_predefSymbol = 5
    RULE_predefKeyword = 6
    RULE_symbol = 7
    RULE_numeral = 8
    RULE_decimal = 9
    RULE_hexadecimal = 10
    RULE_binary = 11
    RULE_string = 12
    RULE_keyword = 13
    RULE_spec_constant = 14
    RULE_s_expr = 15
    RULE_index = 16
    RULE_identifier = 17
    RULE_attribute_value = 18
    RULE_attribute = 19
    RULE_sort = 20
    RULE_qual_identifier = 21
    RULE_var_binding = 22
    RULE_sorted_var = 23
    RULE_pattern = 24
    RULE_match_case = 25
    RULE_term = 26
    RULE_sort_symbol_decl = 27
    RULE_meta_spec_constant = 28
    RULE_fun_symbol_decl = 29
    RULE_par_fun_symbol_decl = 30
    RULE_theory_attribute = 31
    RULE_theory_decl = 32
    RULE_logic_attribue = 33
    RULE_logic = 34
    RULE_sort_dec = 35
    RULE_selector_dec = 36
    RULE_constructor_dec = 37
    RULE_datatype_dec = 38
    RULE_function_dec = 39
    RULE_function_def = 40
    RULE_prop_literal = 41
    RULE_script = 42
    RULE_cmd_assert = 43
    RULE_cmd_checkSat = 44
    RULE_cmd_checkSatAssuming = 45
    RULE_cmd_declareConst = 46
    RULE_cmd_declareDatatype = 47
    RULE_cmd_declareDatatypes = 48
    RULE_cmd_declareFun = 49
    RULE_cmd_declareSort = 50
    RULE_cmd_defineFun = 51
    RULE_cmd_defineFunRec = 52
    RULE_cmd_defineFunsRec = 53
    RULE_cmd_defineSort = 54
    RULE_cmd_echo = 55
    RULE_cmd_exit = 56
    RULE_cmd_getAssertions = 57
    RULE_cmd_getAssignment = 58
    RULE_cmd_getInfo = 59
    RULE_cmd_getModel = 60
    RULE_cmd_getOption = 61
    RULE_cmd_getProof = 62
    RULE_cmd_getUnsatAssumptions = 63
    RULE_cmd_getUnsatCore = 64
    RULE_cmd_getValue = 65
    RULE_cmd_pop = 66
    RULE_cmd_push = 67
    RULE_cmd_reset = 68
    RULE_cmd_resetAssertions = 69
    RULE_cmd_setInfo = 70
    RULE_cmd_setLogic = 71
    RULE_cmd_setOption = 72
    RULE_command = 73
    RULE_b_value = 74
    RULE_option = 75
    RULE_info_flag = 76
    RULE_error_behaviour = 77
    RULE_reason_unknown = 78
    RULE_model_response = 79
    RULE_info_response = 80
    RULE_valuation_pair = 81
    RULE_t_valuation_pair = 82
    RULE_check_sat_response = 83
    RULE_echo_response = 84
    RULE_get_assertions_response = 85
    RULE_get_assignment_response = 86
    RULE_get_info_response = 87
    RULE_get_model_response = 88
    RULE_get_option_response = 89
    RULE_get_proof_response = 90
    RULE_get_unsat_assump_response = 91
    RULE_get_unsat_core_response = 92
    RULE_get_value_response = 93
    RULE_specific_success_response = 94
    RULE_general_response = 95

    ruleNames =  [ "start", "response", "generalReservedWord", "simpleSymbol", 
                   "quotedSymbol", "predefSymbol", "predefKeyword", "symbol", 
                   "numeral", "decimal", "hexadecimal", "binary", "string", 
                   "keyword", "spec_constant", "s_expr", "index", "identifier", 
                   "attribute_value", "attribute", "sort", "qual_identifier", 
                   "var_binding", "sorted_var", "pattern", "match_case", 
                   "term", "sort_symbol_decl", "meta_spec_constant", "fun_symbol_decl", 
                   "par_fun_symbol_decl", "theory_attribute", "theory_decl", 
                   "logic_attribue", "logic", "sort_dec", "selector_dec", 
                   "constructor_dec", "datatype_dec", "function_dec", "function_def", 
                   "prop_literal", "script", "cmd_assert", "cmd_checkSat", 
                   "cmd_checkSatAssuming", "cmd_declareConst", "cmd_declareDatatype", 
                   "cmd_declareDatatypes", "cmd_declareFun", "cmd_declareSort", 
                   "cmd_defineFun", "cmd_defineFunRec", "cmd_defineFunsRec", 
                   "cmd_defineSort", "cmd_echo", "cmd_exit", "cmd_getAssertions", 
                   "cmd_getAssignment", "cmd_getInfo", "cmd_getModel", "cmd_getOption", 
                   "cmd_getProof", "cmd_getUnsatAssumptions", "cmd_getUnsatCore", 
                   "cmd_getValue", "cmd_pop", "cmd_push", "cmd_reset", "cmd_resetAssertions", 
                   "cmd_setInfo", "cmd_setLogic", "cmd_setOption", "command", 
                   "b_value", "option", "info_flag", "error_behaviour", 
                   "reason_unknown", "model_response", "info_response", 
                   "valuation_pair", "t_valuation_pair", "check_sat_response", 
                   "echo_response", "get_assertions_response", "get_assignment_response", 
                   "get_info_response", "get_model_response", "get_option_response", 
                   "get_proof_response", "get_unsat_assump_response", "get_unsat_core_response", 
                   "get_value_response", "specific_success_response", "general_response" ]

    EOF = Token.EOF
    Comment=1
    ParOpen=2
    ParClose=3
    Semicolon=4
    String=5
    QuotedSymbol=6
    PS_Not=7
    PS_Bool=8
    PS_ContinuedExecution=9
    PS_Error=10
    PS_False=11
    PS_ImmediateExit=12
    PS_Incomplete=13
    PS_Logic=14
    PS_Memout=15
    PS_Sat=16
    PS_Success=17
    PS_Theory=18
    PS_True=19
    PS_Unknown=20
    PS_Unsupported=21
    PS_Unsat=22
    CMD_Assert=23
    CMD_CheckSat=24
    CMD_CheckSatAssuming=25
    CMD_DeclareConst=26
    CMD_DeclareDatatype=27
    CMD_DeclareDatatypes=28
    CMD_DeclareFun=29
    CMD_DeclareSort=30
    CMD_DefineFun=31
    CMD_DefineFunRec=32
    CMD_DefineFunsRec=33
    CMD_DefineSort=34
    CMD_Echo=35
    CMD_Exit=36
    CMD_GetAssertions=37
    CMD_GetAssignment=38
    CMD_GetInfo=39
    CMD_GetModel=40
    CMD_GetOption=41
    CMD_GetProof=42
    CMD_GetUnsatAssumptions=43
    CMD_GetUnsatCore=44
    CMD_GetValue=45
    CMD_Pop=46
    CMD_Push=47
    CMD_Reset=48
    CMD_ResetAssertions=49
    CMD_SetInfo=50
    CMD_SetLogic=51
    CMD_SetOption=52
    GRW_Exclamation=53
    GRW_Underscore=54
    GRW_As=55
    GRW_Binary=56
    GRW_Decimal=57
    GRW_Exists=58
    GRW_Hexadecimal=59
    GRW_Forall=60
    GRW_Let=61
    GRW_Match=62
    GRW_Numeral=63
    GRW_Par=64
    GRW_String=65
    Numeral=66
    Binary=67
    HexDecimal=68
    Decimal=69
    Colon=70
    PK_AllStatistics=71
    PK_AssertionStackLevels=72
    PK_Authors=73
    PK_Category=74
    PK_Chainable=75
    PK_Definition=76
    PK_DiagnosticOutputChannel=77
    PK_ErrorBehaviour=78
    PK_Extension=79
    PK_Funs=80
    PK_FunsDescription=81
    PK_GlobalDeclarations=82
    PK_InteractiveMode=83
    PK_Language=84
    PK_LeftAssoc=85
    PK_License=86
    PK_Named=87
    PK_Name=88
    PK_Notes=89
    PK_Pattern=90
    PK_PrintSuccess=91
    PK_ProduceAssertions=92
    PK_ProduceAssignments=93
    PK_ProduceModels=94
    PK_ProduceProofs=95
    PK_ProduceUnsatAssumptions=96
    PK_ProduceUnsatCores=97
    PK_RandomSeed=98
    PK_ReasonUnknown=99
    PK_RegularOutputChannel=100
    PK_ReproducibleResourceLimit=101
    PK_RightAssoc=102
    PK_SmtLibVersion=103
    PK_Sorts=104
    PK_SortsDescription=105
    PK_Source=106
    PK_Status=107
    PK_Theories=108
    PK_Values=109
    PK_Verbosity=110
    PK_Version=111
    UndefinedSymbol=112
    WS=113

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def script(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.ScriptContext,0)


        def EOF(self):
            return self.getToken(SMTLIBv2Parser.EOF, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = SMTLIBv2Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.script()
            self.state = 193
            self.match(SMTLIBv2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResponseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.General_responseContext,0)


        def EOF(self):
            return self.getToken(SMTLIBv2Parser.EOF, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResponse" ):
                listener.enterResponse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResponse" ):
                listener.exitResponse(self)




    def response(self):

        localctx = SMTLIBv2Parser.ResponseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.general_response()
            self.state = 196
            self.match(SMTLIBv2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Exclamation(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exclamation, 0)

        def GRW_Underscore(self):
            return self.getToken(SMTLIBv2Parser.GRW_Underscore, 0)

        def GRW_As(self):
            return self.getToken(SMTLIBv2Parser.GRW_As, 0)

        def GRW_Binary(self):
            return self.getToken(SMTLIBv2Parser.GRW_Binary, 0)

        def GRW_Decimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Decimal, 0)

        def GRW_Exists(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exists, 0)

        def GRW_Hexadecimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Hexadecimal, 0)

        def GRW_Forall(self):
            return self.getToken(SMTLIBv2Parser.GRW_Forall, 0)

        def GRW_Let(self):
            return self.getToken(SMTLIBv2Parser.GRW_Let, 0)

        def GRW_Match(self):
            return self.getToken(SMTLIBv2Parser.GRW_Match, 0)

        def GRW_Numeral(self):
            return self.getToken(SMTLIBv2Parser.GRW_Numeral, 0)

        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def GRW_String(self):
            return self.getToken(SMTLIBv2Parser.GRW_String, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_generalReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralReservedWord" ):
                listener.enterGeneralReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralReservedWord" ):
                listener.exitGeneralReservedWord(self)




    def generalReservedWord(self):

        localctx = SMTLIBv2Parser.GeneralReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_generalReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (SMTLIBv2Parser.GRW_Exclamation - 53)) | (1 << (SMTLIBv2Parser.GRW_Underscore - 53)) | (1 << (SMTLIBv2Parser.GRW_As - 53)) | (1 << (SMTLIBv2Parser.GRW_Binary - 53)) | (1 << (SMTLIBv2Parser.GRW_Decimal - 53)) | (1 << (SMTLIBv2Parser.GRW_Exists - 53)) | (1 << (SMTLIBv2Parser.GRW_Hexadecimal - 53)) | (1 << (SMTLIBv2Parser.GRW_Forall - 53)) | (1 << (SMTLIBv2Parser.GRW_Let - 53)) | (1 << (SMTLIBv2Parser.GRW_Match - 53)) | (1 << (SMTLIBv2Parser.GRW_Numeral - 53)) | (1 << (SMTLIBv2Parser.GRW_Par - 53)) | (1 << (SMTLIBv2Parser.GRW_String - 53)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PredefSymbolContext,0)


        def UndefinedSymbol(self):
            return self.getToken(SMTLIBv2Parser.UndefinedSymbol, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_simpleSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSymbol" ):
                listener.enterSimpleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSymbol" ):
                listener.exitSimpleSymbol(self)




    def simpleSymbol(self):

        localctx = SMTLIBv2Parser.SimpleSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_simpleSymbol)
        try:
            self.state = 202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat]:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.predefSymbol()
                pass
            elif token in [SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 201
                self.match(SMTLIBv2Parser.UndefinedSymbol)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QuotedSymbol(self):
            return self.getToken(SMTLIBv2Parser.QuotedSymbol, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_quotedSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedSymbol" ):
                listener.enterQuotedSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedSymbol" ):
                listener.exitQuotedSymbol(self)




    def quotedSymbol(self):

        localctx = SMTLIBv2Parser.QuotedSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(SMTLIBv2Parser.QuotedSymbol)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Not(self):
            return self.getToken(SMTLIBv2Parser.PS_Not, 0)

        def PS_Bool(self):
            return self.getToken(SMTLIBv2Parser.PS_Bool, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0)

        def PS_Error(self):
            return self.getToken(SMTLIBv2Parser.PS_Error, 0)

        def PS_False(self):
            return self.getToken(SMTLIBv2Parser.PS_False, 0)

        def PS_ImmediateExit(self):
            return self.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0)

        def PS_Incomplete(self):
            return self.getToken(SMTLIBv2Parser.PS_Incomplete, 0)

        def PS_Logic(self):
            return self.getToken(SMTLIBv2Parser.PS_Logic, 0)

        def PS_Memout(self):
            return self.getToken(SMTLIBv2Parser.PS_Memout, 0)

        def PS_Sat(self):
            return self.getToken(SMTLIBv2Parser.PS_Sat, 0)

        def PS_Success(self):
            return self.getToken(SMTLIBv2Parser.PS_Success, 0)

        def PS_Theory(self):
            return self.getToken(SMTLIBv2Parser.PS_Theory, 0)

        def PS_True(self):
            return self.getToken(SMTLIBv2Parser.PS_True, 0)

        def PS_Unknown(self):
            return self.getToken(SMTLIBv2Parser.PS_Unknown, 0)

        def PS_Unsupported(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsupported, 0)

        def PS_Unsat(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsat, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_predefSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefSymbol" ):
                listener.enterPredefSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefSymbol" ):
                listener.exitPredefSymbol(self)




    def predefSymbol(self):

        localctx = SMTLIBv2Parser.PredefSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_predefSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredefKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SMTLIBv2Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def PK_Category(self):
            return self.getToken(SMTLIBv2Parser.PK_Category, 0)

        def PK_Chainable(self):
            return self.getToken(SMTLIBv2Parser.PK_Chainable, 0)

        def PK_Definition(self):
            return self.getToken(SMTLIBv2Parser.PK_Definition, 0)

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def PK_Extension(self):
            return self.getToken(SMTLIBv2Parser.PK_Extension, 0)

        def PK_Funs(self):
            return self.getToken(SMTLIBv2Parser.PK_Funs, 0)

        def PK_FunsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_FunsDescription, 0)

        def PK_GlobalDeclarations(self):
            return self.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0)

        def PK_InteractiveMode(self):
            return self.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0)

        def PK_Language(self):
            return self.getToken(SMTLIBv2Parser.PK_Language, 0)

        def PK_LeftAssoc(self):
            return self.getToken(SMTLIBv2Parser.PK_LeftAssoc, 0)

        def PK_License(self):
            return self.getToken(SMTLIBv2Parser.PK_License, 0)

        def PK_Named(self):
            return self.getToken(SMTLIBv2Parser.PK_Named, 0)

        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def PK_Pattern(self):
            return self.getToken(SMTLIBv2Parser.PK_Pattern, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SMTLIBv2Parser.PK_RandomSeed, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def PK_RegularOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0)

        def PK_RightAssoc(self):
            return self.getToken(SMTLIBv2Parser.PK_RightAssoc, 0)

        def PK_SmtLibVersion(self):
            return self.getToken(SMTLIBv2Parser.PK_SmtLibVersion, 0)

        def PK_Sorts(self):
            return self.getToken(SMTLIBv2Parser.PK_Sorts, 0)

        def PK_SortsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_SortsDescription, 0)

        def PK_Source(self):
            return self.getToken(SMTLIBv2Parser.PK_Source, 0)

        def PK_Status(self):
            return self.getToken(SMTLIBv2Parser.PK_Status, 0)

        def PK_Theories(self):
            return self.getToken(SMTLIBv2Parser.PK_Theories, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Verbosity(self):
            return self.getToken(SMTLIBv2Parser.PK_Verbosity, 0)

        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_predefKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefKeyword" ):
                listener.enterPredefKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefKeyword" ):
                listener.exitPredefKeyword(self)




    def predefKeyword(self):

        localctx = SMTLIBv2Parser.PredefKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_predefKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SMTLIBv2Parser.PK_AllStatistics - 71)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 71)) | (1 << (SMTLIBv2Parser.PK_Authors - 71)) | (1 << (SMTLIBv2Parser.PK_Category - 71)) | (1 << (SMTLIBv2Parser.PK_Chainable - 71)) | (1 << (SMTLIBv2Parser.PK_Definition - 71)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 71)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 71)) | (1 << (SMTLIBv2Parser.PK_Extension - 71)) | (1 << (SMTLIBv2Parser.PK_Funs - 71)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 71)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 71)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 71)) | (1 << (SMTLIBv2Parser.PK_Language - 71)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 71)) | (1 << (SMTLIBv2Parser.PK_License - 71)) | (1 << (SMTLIBv2Parser.PK_Named - 71)) | (1 << (SMTLIBv2Parser.PK_Name - 71)) | (1 << (SMTLIBv2Parser.PK_Notes - 71)) | (1 << (SMTLIBv2Parser.PK_Pattern - 71)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 71)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 71)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 71)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 71)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 71)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 71)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 71)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 71)) | (1 << (SMTLIBv2Parser.PK_Sorts - 71)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 71)) | (1 << (SMTLIBv2Parser.PK_Source - 71)) | (1 << (SMTLIBv2Parser.PK_Status - 71)) | (1 << (SMTLIBv2Parser.PK_Theories - 71)) | (1 << (SMTLIBv2Parser.PK_Values - 71)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 71)) | (1 << (SMTLIBv2Parser.PK_Version - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SimpleSymbolContext,0)


        def quotedSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.QuotedSymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = SMTLIBv2Parser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_symbol)
        try:
            self.state = 212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.simpleSymbol()
                pass
            elif token in [SMTLIBv2Parser.QuotedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 211
                self.quotedSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumeralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numeral(self):
            return self.getToken(SMTLIBv2Parser.Numeral, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_numeral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeral" ):
                listener.enterNumeral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeral" ):
                listener.exitNumeral(self)




    def numeral(self):

        localctx = SMTLIBv2Parser.NumeralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_numeral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(SMTLIBv2Parser.Numeral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(SMTLIBv2Parser.Decimal, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)




    def decimal(self):

        localctx = SMTLIBv2Parser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(SMTLIBv2Parser.Decimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexDecimal(self):
            return self.getToken(SMTLIBv2Parser.HexDecimal, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_hexadecimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimal" ):
                listener.enterHexadecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimal" ):
                listener.exitHexadecimal(self)




    def hexadecimal(self):

        localctx = SMTLIBv2Parser.HexadecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_hexadecimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(SMTLIBv2Parser.HexDecimal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(SMTLIBv2Parser.Binary, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = SMTLIBv2Parser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_binary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(SMTLIBv2Parser.Binary)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self):
            return self.getToken(SMTLIBv2Parser.String, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = SMTLIBv2Parser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(SMTLIBv2Parser.String)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefKeyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PredefKeywordContext,0)


        def Colon(self):
            return self.getToken(SMTLIBv2Parser.Colon, 0)

        def simpleSymbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SimpleSymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SMTLIBv2Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_keyword)
        try:
            self.state = 227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.PK_AllStatistics, SMTLIBv2Parser.PK_AssertionStackLevels, SMTLIBv2Parser.PK_Authors, SMTLIBv2Parser.PK_Category, SMTLIBv2Parser.PK_Chainable, SMTLIBv2Parser.PK_Definition, SMTLIBv2Parser.PK_DiagnosticOutputChannel, SMTLIBv2Parser.PK_ErrorBehaviour, SMTLIBv2Parser.PK_Extension, SMTLIBv2Parser.PK_Funs, SMTLIBv2Parser.PK_FunsDescription, SMTLIBv2Parser.PK_GlobalDeclarations, SMTLIBv2Parser.PK_InteractiveMode, SMTLIBv2Parser.PK_Language, SMTLIBv2Parser.PK_LeftAssoc, SMTLIBv2Parser.PK_License, SMTLIBv2Parser.PK_Named, SMTLIBv2Parser.PK_Name, SMTLIBv2Parser.PK_Notes, SMTLIBv2Parser.PK_Pattern, SMTLIBv2Parser.PK_PrintSuccess, SMTLIBv2Parser.PK_ProduceAssertions, SMTLIBv2Parser.PK_ProduceAssignments, SMTLIBv2Parser.PK_ProduceModels, SMTLIBv2Parser.PK_ProduceProofs, SMTLIBv2Parser.PK_ProduceUnsatAssumptions, SMTLIBv2Parser.PK_ProduceUnsatCores, SMTLIBv2Parser.PK_RandomSeed, SMTLIBv2Parser.PK_ReasonUnknown, SMTLIBv2Parser.PK_RegularOutputChannel, SMTLIBv2Parser.PK_ReproducibleResourceLimit, SMTLIBv2Parser.PK_RightAssoc, SMTLIBv2Parser.PK_SmtLibVersion, SMTLIBv2Parser.PK_Sorts, SMTLIBv2Parser.PK_SortsDescription, SMTLIBv2Parser.PK_Source, SMTLIBv2Parser.PK_Status, SMTLIBv2Parser.PK_Theories, SMTLIBv2Parser.PK_Values, SMTLIBv2Parser.PK_Verbosity, SMTLIBv2Parser.PK_Version]:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.predefKeyword()
                pass
            elif token in [SMTLIBv2Parser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(SMTLIBv2Parser.Colon)
                self.state = 226
                self.simpleSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spec_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def decimal(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.DecimalContext,0)


        def hexadecimal(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.HexadecimalContext,0)


        def binary(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.BinaryContext,0)


        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec_constant" ):
                listener.enterSpec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec_constant" ):
                listener.exitSpec_constant(self)




    def spec_constant(self):

        localctx = SMTLIBv2Parser.Spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_spec_constant)
        try:
            self.state = 234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.Numeral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.numeral()
                pass
            elif token in [SMTLIBv2Parser.Decimal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.decimal()
                pass
            elif token in [SMTLIBv2Parser.HexDecimal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.hexadecimal()
                pass
            elif token in [SMTLIBv2Parser.Binary]:
                self.enterOuterAlt(localctx, 4)
                self.state = 232
                self.binary()
                pass
            elif token in [SMTLIBv2Parser.String]:
                self.enterOuterAlt(localctx, 5)
                self.state = 233
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_s_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_expr" ):
                listener.enterS_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_expr" ):
                listener.exitS_expr(self)




    def s_expr(self):

        localctx = SMTLIBv2Parser.S_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_expr)
        self._la = 0 # Token type
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.String, SMTLIBv2Parser.Numeral, SMTLIBv2Parser.Binary, SMTLIBv2Parser.HexDecimal, SMTLIBv2Parser.Decimal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.spec_constant()
                pass
            elif token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.symbol()
                pass
            elif token in [SMTLIBv2Parser.Colon, SMTLIBv2Parser.PK_AllStatistics, SMTLIBv2Parser.PK_AssertionStackLevels, SMTLIBv2Parser.PK_Authors, SMTLIBv2Parser.PK_Category, SMTLIBv2Parser.PK_Chainable, SMTLIBv2Parser.PK_Definition, SMTLIBv2Parser.PK_DiagnosticOutputChannel, SMTLIBv2Parser.PK_ErrorBehaviour, SMTLIBv2Parser.PK_Extension, SMTLIBv2Parser.PK_Funs, SMTLIBv2Parser.PK_FunsDescription, SMTLIBv2Parser.PK_GlobalDeclarations, SMTLIBv2Parser.PK_InteractiveMode, SMTLIBv2Parser.PK_Language, SMTLIBv2Parser.PK_LeftAssoc, SMTLIBv2Parser.PK_License, SMTLIBv2Parser.PK_Named, SMTLIBv2Parser.PK_Name, SMTLIBv2Parser.PK_Notes, SMTLIBv2Parser.PK_Pattern, SMTLIBv2Parser.PK_PrintSuccess, SMTLIBv2Parser.PK_ProduceAssertions, SMTLIBv2Parser.PK_ProduceAssignments, SMTLIBv2Parser.PK_ProduceModels, SMTLIBv2Parser.PK_ProduceProofs, SMTLIBv2Parser.PK_ProduceUnsatAssumptions, SMTLIBv2Parser.PK_ProduceUnsatCores, SMTLIBv2Parser.PK_RandomSeed, SMTLIBv2Parser.PK_ReasonUnknown, SMTLIBv2Parser.PK_RegularOutputChannel, SMTLIBv2Parser.PK_ReproducibleResourceLimit, SMTLIBv2Parser.PK_RightAssoc, SMTLIBv2Parser.PK_SmtLibVersion, SMTLIBv2Parser.PK_Sorts, SMTLIBv2Parser.PK_SortsDescription, SMTLIBv2Parser.PK_Source, SMTLIBv2Parser.PK_Status, SMTLIBv2Parser.PK_Theories, SMTLIBv2Parser.PK_Values, SMTLIBv2Parser.PK_Verbosity, SMTLIBv2Parser.PK_Version]:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.keyword()
                pass
            elif token in [SMTLIBv2Parser.ParOpen]:
                self.enterOuterAlt(localctx, 4)
                self.state = 239
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.Colon - 66)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 66)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 66)) | (1 << (SMTLIBv2Parser.PK_Authors - 66)) | (1 << (SMTLIBv2Parser.PK_Category - 66)) | (1 << (SMTLIBv2Parser.PK_Chainable - 66)) | (1 << (SMTLIBv2Parser.PK_Definition - 66)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 66)) | (1 << (SMTLIBv2Parser.PK_Extension - 66)) | (1 << (SMTLIBv2Parser.PK_Funs - 66)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 66)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 66)) | (1 << (SMTLIBv2Parser.PK_Language - 66)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_License - 66)) | (1 << (SMTLIBv2Parser.PK_Named - 66)) | (1 << (SMTLIBv2Parser.PK_Name - 66)) | (1 << (SMTLIBv2Parser.PK_Notes - 66)) | (1 << (SMTLIBv2Parser.PK_Pattern - 66)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 66)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 66)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 66)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 66)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 66)) | (1 << (SMTLIBv2Parser.PK_Sorts - 66)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_Source - 66)) | (1 << (SMTLIBv2Parser.PK_Status - 66)) | (1 << (SMTLIBv2Parser.PK_Theories - 66)) | (1 << (SMTLIBv2Parser.PK_Values - 66)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 66)) | (1 << (SMTLIBv2Parser.PK_Version - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0):
                    self.state = 240
                    self.s_expr()
                    self.state = 245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 246
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = SMTLIBv2Parser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_index)
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.Numeral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.numeral()
                pass
            elif token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 250
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def GRW_Underscore(self):
            return self.getToken(SMTLIBv2Parser.GRW_Underscore, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.IndexContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.IndexContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SMTLIBv2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.symbol()
                pass
            elif token in [SMTLIBv2Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 255
                self.match(SMTLIBv2Parser.GRW_Underscore)
                self.state = 256
                self.symbol()
                self.state = 258 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 257
                    self.index()
                    self.state = 260 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.Numeral or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 262
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def s_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.S_exprContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_attribute_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_value" ):
                listener.enterAttribute_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_value" ):
                listener.exitAttribute_value(self)




    def attribute_value(self):

        localctx = SMTLIBv2Parser.Attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute_value)
        self._la = 0 # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.String, SMTLIBv2Parser.Numeral, SMTLIBv2Parser.Binary, SMTLIBv2Parser.HexDecimal, SMTLIBv2Parser.Decimal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.spec_constant()
                pass
            elif token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.symbol()
                pass
            elif token in [SMTLIBv2Parser.ParOpen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 268
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.Colon - 66)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 66)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 66)) | (1 << (SMTLIBv2Parser.PK_Authors - 66)) | (1 << (SMTLIBv2Parser.PK_Category - 66)) | (1 << (SMTLIBv2Parser.PK_Chainable - 66)) | (1 << (SMTLIBv2Parser.PK_Definition - 66)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 66)) | (1 << (SMTLIBv2Parser.PK_Extension - 66)) | (1 << (SMTLIBv2Parser.PK_Funs - 66)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 66)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 66)) | (1 << (SMTLIBv2Parser.PK_Language - 66)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_License - 66)) | (1 << (SMTLIBv2Parser.PK_Named - 66)) | (1 << (SMTLIBv2Parser.PK_Name - 66)) | (1 << (SMTLIBv2Parser.PK_Notes - 66)) | (1 << (SMTLIBv2Parser.PK_Pattern - 66)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 66)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 66)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 66)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 66)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 66)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 66)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 66)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 66)) | (1 << (SMTLIBv2Parser.PK_Sorts - 66)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 66)) | (1 << (SMTLIBv2Parser.PK_Source - 66)) | (1 << (SMTLIBv2Parser.PK_Status - 66)) | (1 << (SMTLIBv2Parser.PK_Theories - 66)) | (1 << (SMTLIBv2Parser.PK_Values - 66)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 66)) | (1 << (SMTLIBv2Parser.PK_Version - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0):
                    self.state = 269
                    self.s_expr()
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 275
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def attribute_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = SMTLIBv2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attribute)
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.keyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.keyword()
                self.state = 280
                self.attribute_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort" ):
                listener.enterSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort" ):
                listener.exitSort(self)




    def sort(self):

        localctx = SMTLIBv2Parser.SortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sort)
        self._la = 0 # Token type
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 286
                self.identifier()
                self.state = 288 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 287
                    self.sort()
                    self.state = 290 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 292
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def GRW_As(self):
            return self.getToken(SMTLIBv2Parser.GRW_As, 0)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_qual_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_identifier" ):
                listener.enterQual_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_identifier" ):
                listener.exitQual_identifier(self)




    def qual_identifier(self):

        localctx = SMTLIBv2Parser.Qual_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_qual_identifier)
        try:
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 298
                self.match(SMTLIBv2Parser.GRW_As)
                self.state = 299
                self.identifier()
                self.state = 300
                self.sort()
                self.state = 301
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_bindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_var_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_binding" ):
                listener.enterVar_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_binding" ):
                listener.exitVar_binding(self)




    def var_binding(self):

        localctx = SMTLIBv2Parser.Var_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_var_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 306
            self.symbol()
            self.state = 307
            self.term()
            self.state = 308
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sorted_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sorted_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_var" ):
                listener.enterSorted_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_var" ):
                listener.exitSorted_var(self)




    def sorted_var(self):

        localctx = SMTLIBv2Parser.Sorted_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sorted_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 311
            self.symbol()
            self.state = 312
            self.sort()
            self.state = 313
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = SMTLIBv2Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.symbol()
                pass
            elif token in [SMTLIBv2Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 317
                self.symbol()
                self.state = 319 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 318
                    self.symbol()
                    self.state = 321 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 323
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def pattern(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.PatternContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_match_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_case" ):
                listener.enterMatch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_case" ):
                listener.exitMatch_case(self)




    def match_case(self):

        localctx = SMTLIBv2Parser.Match_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_match_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 328
            self.pattern()
            self.state = 329
            self.term()
            self.state = 330
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def qual_identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Qual_identifierContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def GRW_Let(self):
            return self.getToken(SMTLIBv2Parser.GRW_Let, 0)

        def var_binding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Var_bindingContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Var_bindingContext,i)


        def GRW_Forall(self):
            return self.getToken(SMTLIBv2Parser.GRW_Forall, 0)

        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def GRW_Exists(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exists, 0)

        def GRW_Match(self):
            return self.getToken(SMTLIBv2Parser.GRW_Match, 0)

        def match_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Match_caseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Match_caseContext,i)


        def GRW_Exclamation(self):
            return self.getToken(SMTLIBv2Parser.GRW_Exclamation, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = SMTLIBv2Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.spec_constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.qual_identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 335
                self.qual_identifier()
                self.state = 337 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 336
                    self.term()
                    self.state = 339 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0)):
                        break

                self.state = 341
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 343
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 344
                self.match(SMTLIBv2Parser.GRW_Let)
                self.state = 345
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 347 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 346
                    self.var_binding()
                    self.state = 349 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 351
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 352
                self.term()
                self.state = 353
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 355
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 356
                self.match(SMTLIBv2Parser.GRW_Forall)
                self.state = 357
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 359 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 358
                    self.sorted_var()
                    self.state = 361 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 363
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 364
                self.term()
                self.state = 365
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 367
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 368
                self.match(SMTLIBv2Parser.GRW_Exists)
                self.state = 369
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 371 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 370
                    self.sorted_var()
                    self.state = 373 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 375
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 376
                self.term()
                self.state = 377
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 379
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 380
                self.match(SMTLIBv2Parser.GRW_Match)
                self.state = 381
                self.term()
                self.state = 382
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 384 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 383
                    self.match_case()
                    self.state = 386 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 388
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 389
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 391
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 392
                self.match(SMTLIBv2Parser.GRW_Exclamation)
                self.state = 393
                self.term()
                self.state = 395 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 394
                    self.attribute()
                    self.state = 397 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0)):
                        break

                self.state = 399
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_symbol_decl" ):
                listener.enterSort_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_symbol_decl" ):
                listener.exitSort_symbol_decl(self)




    def sort_symbol_decl(self):

        localctx = SMTLIBv2Parser.Sort_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sort_symbol_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 404
            self.identifier()
            self.state = 405
            self.numeral()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0):
                self.state = 406
                self.attribute()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Meta_spec_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRW_Numeral(self):
            return self.getToken(SMTLIBv2Parser.GRW_Numeral, 0)

        def GRW_Decimal(self):
            return self.getToken(SMTLIBv2Parser.GRW_Decimal, 0)

        def GRW_String(self):
            return self.getToken(SMTLIBv2Parser.GRW_String, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_meta_spec_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta_spec_constant" ):
                listener.enterMeta_spec_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta_spec_constant" ):
                listener.exitMeta_spec_constant(self)




    def meta_spec_constant(self):

        localctx = SMTLIBv2Parser.Meta_spec_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_meta_spec_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (SMTLIBv2Parser.GRW_Decimal - 57)) | (1 << (SMTLIBv2Parser.GRW_Numeral - 57)) | (1 << (SMTLIBv2Parser.GRW_String - 57)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fun_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Spec_constantContext,0)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def meta_spec_constant(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Meta_spec_constantContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun_symbol_decl" ):
                listener.enterFun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun_symbol_decl" ):
                listener.exitFun_symbol_decl(self)




    def fun_symbol_decl(self):

        localctx = SMTLIBv2Parser.Fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 417
                self.spec_constant()
                self.state = 418
                self.sort()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0):
                    self.state = 419
                    self.attribute()
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 425
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 428
                self.meta_spec_constant()
                self.state = 429
                self.sort()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0):
                    self.state = 430
                    self.attribute()
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 436
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 439
                self.identifier()
                self.state = 441 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 440
                    self.sort()
                    self.state = 443 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0):
                    self.state = 445
                    self.attribute()
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 451
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Par_fun_symbol_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fun_symbol_decl(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Fun_symbol_declContext,0)


        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def identifier(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.IdentifierContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_par_fun_symbol_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar_fun_symbol_decl" ):
                listener.enterPar_fun_symbol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar_fun_symbol_decl" ):
                listener.exitPar_fun_symbol_decl(self)




    def par_fun_symbol_decl(self):

        localctx = SMTLIBv2Parser.Par_fun_symbol_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_par_fun_symbol_decl)
        self._la = 0 # Token type
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.fun_symbol_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 457
                self.match(SMTLIBv2Parser.GRW_Par)
                self.state = 458
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 460 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 459
                    self.symbol()
                    self.state = 462 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 464
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 465
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 466
                self.identifier()
                self.state = 468 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 467
                    self.sort()
                    self.state = 470 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0):
                    self.state = 472
                    self.attribute()
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 478
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 479
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Theory_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Sorts(self):
            return self.getToken(SMTLIBv2Parser.PK_Sorts, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sort_symbol_declContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sort_symbol_declContext,i)


        def PK_Funs(self):
            return self.getToken(SMTLIBv2Parser.PK_Funs, 0)

        def par_fun_symbol_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Par_fun_symbol_declContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Par_fun_symbol_declContext,i)


        def PK_SortsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_SortsDescription, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_FunsDescription(self):
            return self.getToken(SMTLIBv2Parser.PK_FunsDescription, 0)

        def PK_Definition(self):
            return self.getToken(SMTLIBv2Parser.PK_Definition, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_theory_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_attribute" ):
                listener.enterTheory_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_attribute" ):
                listener.exitTheory_attribute(self)




    def theory_attribute(self):

        localctx = SMTLIBv2Parser.Theory_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_theory_attribute)
        self._la = 0 # Token type
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.match(SMTLIBv2Parser.PK_Sorts)
                self.state = 484
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 486 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 485
                    self.sort_symbol_decl()
                    self.state = 488 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 490
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.match(SMTLIBv2Parser.PK_Funs)
                self.state = 493
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 495 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 494
                    self.par_fun_symbol_decl()
                    self.state = 497 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 499
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 501
                self.match(SMTLIBv2Parser.PK_SortsDescription)
                self.state = 502
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 503
                self.match(SMTLIBv2Parser.PK_FunsDescription)
                self.state = 504
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.match(SMTLIBv2Parser.PK_Definition)
                self.state = 506
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 507
                self.match(SMTLIBv2Parser.PK_Values)
                self.state = 508
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 509
                self.match(SMTLIBv2Parser.PK_Notes)
                self.state = 510
                self.string()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 511
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Theory_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Theory(self):
            return self.getToken(SMTLIBv2Parser.PS_Theory, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def theory_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Theory_attributeContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Theory_attributeContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_theory_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheory_decl" ):
                listener.enterTheory_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheory_decl" ):
                listener.exitTheory_decl(self)




    def theory_decl(self):

        localctx = SMTLIBv2Parser.Theory_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_theory_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 515
            self.match(SMTLIBv2Parser.PS_Theory)
            self.state = 516
            self.symbol()
            self.state = 518 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 517
                self.theory_attribute()
                self.state = 520 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0)):
                    break

            self.state = 522
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logic_attribueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_Theories(self):
            return self.getToken(SMTLIBv2Parser.PK_Theories, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def PK_Language(self):
            return self.getToken(SMTLIBv2Parser.PK_Language, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_Extension(self):
            return self.getToken(SMTLIBv2Parser.PK_Extension, 0)

        def PK_Values(self):
            return self.getToken(SMTLIBv2Parser.PK_Values, 0)

        def PK_Notes(self):
            return self.getToken(SMTLIBv2Parser.PK_Notes, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_logic_attribue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic_attribue" ):
                listener.enterLogic_attribue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic_attribue" ):
                listener.exitLogic_attribue(self)




    def logic_attribue(self):

        localctx = SMTLIBv2Parser.Logic_attribueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_logic_attribue)
        self._la = 0 # Token type
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(SMTLIBv2Parser.PK_Theories)
                self.state = 525
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 527 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 526
                    self.symbol()
                    self.state = 529 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 531
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.match(SMTLIBv2Parser.PK_Language)
                self.state = 534
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 535
                self.match(SMTLIBv2Parser.PK_Extension)
                self.state = 536
                self.string()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.match(SMTLIBv2Parser.PK_Values)
                self.state = 538
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 539
                self.match(SMTLIBv2Parser.PK_Notes)
                self.state = 540
                self.string()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 541
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Logic(self):
            return self.getToken(SMTLIBv2Parser.PS_Logic, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def logic_attribue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Logic_attribueContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Logic_attribueContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)




    def logic(self):

        localctx = SMTLIBv2Parser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_logic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 545
            self.match(SMTLIBv2Parser.PS_Logic)
            self.state = 546
            self.symbol()
            self.state = 548 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 547
                self.logic_attribue()
                self.state = 550 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0)):
                    break

            self.state = 552
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_sort_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_dec" ):
                listener.enterSort_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_dec" ):
                listener.exitSort_dec(self)




    def sort_dec(self):

        localctx = SMTLIBv2Parser.Sort_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sort_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 555
            self.symbol()
            self.state = 556
            self.numeral()
            self.state = 557
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selector_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_selector_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_dec" ):
                listener.enterSelector_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_dec" ):
                listener.exitSelector_dec(self)




    def selector_dec(self):

        localctx = SMTLIBv2Parser.Selector_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_selector_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 560
            self.symbol()
            self.state = 561
            self.sort()
            self.state = 562
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def selector_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Selector_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Selector_decContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_constructor_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_dec" ):
                listener.enterConstructor_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_dec" ):
                listener.exitConstructor_dec(self)




    def constructor_dec(self):

        localctx = SMTLIBv2Parser.Constructor_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constructor_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 565
            self.symbol()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 566
                self.selector_dec()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 572
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datatype_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def constructor_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Constructor_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Constructor_decContext,i)


        def GRW_Par(self):
            return self.getToken(SMTLIBv2Parser.GRW_Par, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_datatype_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype_dec" ):
                listener.enterDatatype_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype_dec" ):
                listener.exitDatatype_dec(self)




    def datatype_dec(self):

        localctx = SMTLIBv2Parser.Datatype_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_datatype_dec)
        self._la = 0 # Token type
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 576 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 575
                    self.constructor_dec()
                    self.state = 578 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 580
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 583
                self.match(SMTLIBv2Parser.GRW_Par)
                self.state = 584
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 586 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 585
                    self.symbol()
                    self.state = 588 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol):
                        break

                self.state = 590
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 591
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 593 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 592
                    self.constructor_dec()
                    self.state = 595 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 597
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 598
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_function_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_dec" ):
                listener.enterFunction_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_dec" ):
                listener.exitFunction_dec(self)




    def function_dec(self):

        localctx = SMTLIBv2Parser.Function_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_function_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 603
            self.symbol()
            self.state = 604
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 605
                self.sorted_var()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 612
            self.sort()
            self.state = 613
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def sort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,0)


        def term(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,0)


        def sorted_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sorted_varContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sorted_varContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_function_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def" ):
                listener.enterFunction_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def" ):
                listener.exitFunction_def(self)




    def function_def(self):

        localctx = SMTLIBv2Parser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_function_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.symbol()
            self.state = 616
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 617
                self.sorted_var()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self.match(SMTLIBv2Parser.ParClose)
            self.state = 624
            self.sort()
            self.state = 625
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prop_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Not(self):
            return self.getToken(SMTLIBv2Parser.PS_Not, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_prop_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProp_literal" ):
                listener.enterProp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProp_literal" ):
                listener.exitProp_literal(self)




    def prop_literal(self):

        localctx = SMTLIBv2Parser.Prop_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_prop_literal)
        try:
            self.state = 633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SMTLIBv2Parser.QuotedSymbol, SMTLIBv2Parser.PS_Not, SMTLIBv2Parser.PS_Bool, SMTLIBv2Parser.PS_ContinuedExecution, SMTLIBv2Parser.PS_Error, SMTLIBv2Parser.PS_False, SMTLIBv2Parser.PS_ImmediateExit, SMTLIBv2Parser.PS_Incomplete, SMTLIBv2Parser.PS_Logic, SMTLIBv2Parser.PS_Memout, SMTLIBv2Parser.PS_Sat, SMTLIBv2Parser.PS_Success, SMTLIBv2Parser.PS_Theory, SMTLIBv2Parser.PS_True, SMTLIBv2Parser.PS_Unknown, SMTLIBv2Parser.PS_Unsupported, SMTLIBv2Parser.PS_Unsat, SMTLIBv2Parser.UndefinedSymbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.symbol()
                pass
            elif token in [SMTLIBv2Parser.ParOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 629
                self.match(SMTLIBv2Parser.PS_Not)
                self.state = 630
                self.symbol()
                self.state = 631
                self.match(SMTLIBv2Parser.ParClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.CommandContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.CommandContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = SMTLIBv2Parser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 635
                self.command()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_assertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Assert(self):
            return self.getToken(SMTLIBv2Parser.CMD_Assert, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_assert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_assert" ):
                listener.enterCmd_assert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_assert" ):
                listener.exitCmd_assert(self)




    def cmd_assert(self):

        localctx = SMTLIBv2Parser.Cmd_assertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_cmd_assert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(SMTLIBv2Parser.CMD_Assert)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_checkSatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSat(self):
            return self.getToken(SMTLIBv2Parser.CMD_CheckSat, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_checkSat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSat" ):
                listener.enterCmd_checkSat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSat" ):
                listener.exitCmd_checkSat(self)




    def cmd_checkSat(self):

        localctx = SMTLIBv2Parser.Cmd_checkSatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_cmd_checkSat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(SMTLIBv2Parser.CMD_CheckSat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_checkSatAssumingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_CheckSatAssuming(self):
            return self.getToken(SMTLIBv2Parser.CMD_CheckSatAssuming, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_checkSatAssuming

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_checkSatAssuming" ):
                listener.enterCmd_checkSatAssuming(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_checkSatAssuming" ):
                listener.exitCmd_checkSatAssuming(self)




    def cmd_checkSatAssuming(self):

        localctx = SMTLIBv2Parser.Cmd_checkSatAssumingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_cmd_checkSatAssuming)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(SMTLIBv2Parser.CMD_CheckSatAssuming)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareConst(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareConst, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareConst" ):
                listener.enterCmd_declareConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareConst" ):
                listener.exitCmd_declareConst(self)




    def cmd_declareConst(self):

        localctx = SMTLIBv2Parser.Cmd_declareConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_cmd_declareConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(SMTLIBv2Parser.CMD_DeclareConst)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareDatatypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatype(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareDatatype, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareDatatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatype" ):
                listener.enterCmd_declareDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatype" ):
                listener.exitCmd_declareDatatype(self)




    def cmd_declareDatatype(self):

        localctx = SMTLIBv2Parser.Cmd_declareDatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cmd_declareDatatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(SMTLIBv2Parser.CMD_DeclareDatatype)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareDatatypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareDatatypes(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareDatatypes, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareDatatypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareDatatypes" ):
                listener.enterCmd_declareDatatypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareDatatypes" ):
                listener.exitCmd_declareDatatypes(self)




    def cmd_declareDatatypes(self):

        localctx = SMTLIBv2Parser.Cmd_declareDatatypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_cmd_declareDatatypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(SMTLIBv2Parser.CMD_DeclareDatatypes)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareFun(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareFun, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareFun" ):
                listener.enterCmd_declareFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareFun" ):
                listener.exitCmd_declareFun(self)




    def cmd_declareFun(self):

        localctx = SMTLIBv2Parser.Cmd_declareFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmd_declareFun)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(SMTLIBv2Parser.CMD_DeclareFun)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_declareSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DeclareSort(self):
            return self.getToken(SMTLIBv2Parser.CMD_DeclareSort, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_declareSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_declareSort" ):
                listener.enterCmd_declareSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_declareSort" ):
                listener.exitCmd_declareSort(self)




    def cmd_declareSort(self):

        localctx = SMTLIBv2Parser.Cmd_declareSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cmd_declareSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(SMTLIBv2Parser.CMD_DeclareSort)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFun(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFun, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFun" ):
                listener.enterCmd_defineFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFun" ):
                listener.exitCmd_defineFun(self)




    def cmd_defineFun(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_cmd_defineFun)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(SMTLIBv2Parser.CMD_DefineFun)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunRecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunRec, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFunRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunRec" ):
                listener.enterCmd_defineFunRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunRec" ):
                listener.exitCmd_defineFunRec(self)




    def cmd_defineFunRec(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_cmd_defineFunRec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(SMTLIBv2Parser.CMD_DefineFunRec)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineFunsRecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineFunsRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineFunsRec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineFunsRec" ):
                listener.enterCmd_defineFunsRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineFunsRec" ):
                listener.exitCmd_defineFunsRec(self)




    def cmd_defineFunsRec(self):

        localctx = SMTLIBv2Parser.Cmd_defineFunsRecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_cmd_defineFunsRec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(SMTLIBv2Parser.CMD_DefineFunsRec)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_defineSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_DefineSort(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineSort, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_defineSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_defineSort" ):
                listener.enterCmd_defineSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_defineSort" ):
                listener.exitCmd_defineSort(self)




    def cmd_defineSort(self):

        localctx = SMTLIBv2Parser.Cmd_defineSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_cmd_defineSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SMTLIBv2Parser.CMD_DefineSort)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_echoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Echo(self):
            return self.getToken(SMTLIBv2Parser.CMD_Echo, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_echo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_echo" ):
                listener.enterCmd_echo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_echo" ):
                listener.exitCmd_echo(self)




    def cmd_echo(self):

        localctx = SMTLIBv2Parser.Cmd_echoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cmd_echo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(SMTLIBv2Parser.CMD_Echo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_exitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Exit(self):
            return self.getToken(SMTLIBv2Parser.CMD_Exit, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_exit" ):
                listener.enterCmd_exit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_exit" ):
                listener.exitCmd_exit(self)




    def cmd_exit(self):

        localctx = SMTLIBv2Parser.Cmd_exitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cmd_exit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(SMTLIBv2Parser.CMD_Exit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getAssertionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssertions(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetAssertions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssertions" ):
                listener.enterCmd_getAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssertions" ):
                listener.exitCmd_getAssertions(self)




    def cmd_getAssertions(self):

        localctx = SMTLIBv2Parser.Cmd_getAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cmd_getAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SMTLIBv2Parser.CMD_GetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetAssignment(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetAssignment, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getAssignment" ):
                listener.enterCmd_getAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getAssignment" ):
                listener.exitCmd_getAssignment(self)




    def cmd_getAssignment(self):

        localctx = SMTLIBv2Parser.Cmd_getAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cmd_getAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(SMTLIBv2Parser.CMD_GetAssignment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetInfo(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetInfo, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getInfo" ):
                listener.enterCmd_getInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getInfo" ):
                listener.exitCmd_getInfo(self)




    def cmd_getInfo(self):

        localctx = SMTLIBv2Parser.Cmd_getInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cmd_getInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(SMTLIBv2Parser.CMD_GetInfo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getModelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetModel(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetModel, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getModel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getModel" ):
                listener.enterCmd_getModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getModel" ):
                listener.exitCmd_getModel(self)




    def cmd_getModel(self):

        localctx = SMTLIBv2Parser.Cmd_getModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cmd_getModel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(SMTLIBv2Parser.CMD_GetModel)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetOption(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetOption, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getOption" ):
                listener.enterCmd_getOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getOption" ):
                listener.exitCmd_getOption(self)




    def cmd_getOption(self):

        localctx = SMTLIBv2Parser.Cmd_getOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_cmd_getOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(SMTLIBv2Parser.CMD_GetOption)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getProofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetProof(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetProof, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getProof

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getProof" ):
                listener.enterCmd_getProof(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getProof" ):
                listener.exitCmd_getProof(self)




    def cmd_getProof(self):

        localctx = SMTLIBv2Parser.Cmd_getProofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_cmd_getProof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(SMTLIBv2Parser.CMD_GetProof)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getUnsatAssumptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetUnsatAssumptions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getUnsatAssumptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatAssumptions" ):
                listener.enterCmd_getUnsatAssumptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatAssumptions" ):
                listener.exitCmd_getUnsatAssumptions(self)




    def cmd_getUnsatAssumptions(self):

        localctx = SMTLIBv2Parser.Cmd_getUnsatAssumptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_cmd_getUnsatAssumptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(SMTLIBv2Parser.CMD_GetUnsatAssumptions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getUnsatCoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetUnsatCore(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetUnsatCore, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getUnsatCore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getUnsatCore" ):
                listener.enterCmd_getUnsatCore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getUnsatCore" ):
                listener.exitCmd_getUnsatCore(self)




    def cmd_getUnsatCore(self):

        localctx = SMTLIBv2Parser.Cmd_getUnsatCoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_cmd_getUnsatCore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(SMTLIBv2Parser.CMD_GetUnsatCore)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_getValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_GetValue(self):
            return self.getToken(SMTLIBv2Parser.CMD_GetValue, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_getValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_getValue" ):
                listener.enterCmd_getValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_getValue" ):
                listener.exitCmd_getValue(self)




    def cmd_getValue(self):

        localctx = SMTLIBv2Parser.Cmd_getValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cmd_getValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(SMTLIBv2Parser.CMD_GetValue)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_popContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Pop(self):
            return self.getToken(SMTLIBv2Parser.CMD_Pop, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_pop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_pop" ):
                listener.enterCmd_pop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_pop" ):
                listener.exitCmd_pop(self)




    def cmd_pop(self):

        localctx = SMTLIBv2Parser.Cmd_popContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cmd_pop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(SMTLIBv2Parser.CMD_Pop)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_pushContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Push(self):
            return self.getToken(SMTLIBv2Parser.CMD_Push, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_push

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_push" ):
                listener.enterCmd_push(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_push" ):
                listener.exitCmd_push(self)




    def cmd_push(self):

        localctx = SMTLIBv2Parser.Cmd_pushContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_cmd_push)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(SMTLIBv2Parser.CMD_Push)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_Reset(self):
            return self.getToken(SMTLIBv2Parser.CMD_Reset, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_reset" ):
                listener.enterCmd_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_reset" ):
                listener.exitCmd_reset(self)




    def cmd_reset(self):

        localctx = SMTLIBv2Parser.Cmd_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_cmd_reset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(SMTLIBv2Parser.CMD_Reset)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_resetAssertionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_ResetAssertions(self):
            return self.getToken(SMTLIBv2Parser.CMD_ResetAssertions, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_resetAssertions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_resetAssertions" ):
                listener.enterCmd_resetAssertions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_resetAssertions" ):
                listener.exitCmd_resetAssertions(self)




    def cmd_resetAssertions(self):

        localctx = SMTLIBv2Parser.Cmd_resetAssertionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cmd_resetAssertions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(SMTLIBv2Parser.CMD_ResetAssertions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetInfo(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetInfo, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setInfo" ):
                listener.enterCmd_setInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setInfo" ):
                listener.exitCmd_setInfo(self)




    def cmd_setInfo(self):

        localctx = SMTLIBv2Parser.Cmd_setInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_cmd_setInfo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(SMTLIBv2Parser.CMD_SetInfo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setLogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetLogic(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetLogic, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setLogic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setLogic" ):
                listener.enterCmd_setLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setLogic" ):
                listener.exitCmd_setLogic(self)




    def cmd_setLogic(self):

        localctx = SMTLIBv2Parser.Cmd_setLogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_cmd_setLogic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(SMTLIBv2Parser.CMD_SetLogic)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmd_setOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_SetOption(self):
            return self.getToken(SMTLIBv2Parser.CMD_SetOption, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_cmd_setOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmd_setOption" ):
                listener.enterCmd_setOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmd_setOption" ):
                listener.exitCmd_setOption(self)




    def cmd_setOption(self):

        localctx = SMTLIBv2Parser.Cmd_setOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_cmd_setOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(SMTLIBv2Parser.CMD_SetOption)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def cmd_assert(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_assertContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def cmd_checkSat(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_checkSatContext,0)


        def cmd_checkSatAssuming(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_checkSatAssumingContext,0)


        def cmd_declareConst(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareConstContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def sort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SortContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SortContext,i)


        def cmd_declareDatatype(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareDatatypeContext,0)


        def datatype_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Datatype_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Datatype_decContext,i)


        def cmd_declareDatatypes(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareDatatypesContext,0)


        def sort_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Sort_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Sort_decContext,i)


        def cmd_declareFun(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareFunContext,0)


        def cmd_declareSort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_declareSortContext,0)


        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def cmd_defineFun(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunContext,0)


        def function_def(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Function_defContext,0)


        def cmd_defineFunRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunRecContext,0)


        def cmd_defineFunsRec(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineFunsRecContext,0)


        def function_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Function_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Function_decContext,i)


        def cmd_defineSort(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_defineSortContext,0)


        def cmd_echo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_echoContext,0)


        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def cmd_exit(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_exitContext,0)


        def cmd_getAssertions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getAssertionsContext,0)


        def cmd_getAssignment(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getAssignmentContext,0)


        def cmd_getInfo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getInfoContext,0)


        def info_flag(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Info_flagContext,0)


        def cmd_getModel(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getModelContext,0)


        def cmd_getOption(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getOptionContext,0)


        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def cmd_getProof(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getProofContext,0)


        def cmd_getUnsatAssumptions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getUnsatAssumptionsContext,0)


        def cmd_getUnsatCore(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getUnsatCoreContext,0)


        def cmd_getValue(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_getValueContext,0)


        def cmd_pop(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_popContext,0)


        def cmd_push(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_pushContext,0)


        def cmd_reset(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_resetContext,0)


        def cmd_resetAssertions(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_resetAssertionsContext,0)


        def cmd_setInfo(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setInfoContext,0)


        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def cmd_setLogic(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setLogicContext,0)


        def cmd_setOption(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Cmd_setOptionContext,0)


        def option(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.OptionContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)




    def command(self):

        localctx = SMTLIBv2Parser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_command)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 702
                self.cmd_assert()
                self.state = 703
                self.term()
                self.state = 704
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 707
                self.cmd_checkSat()
                self.state = 708
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 711
                self.cmd_checkSatAssuming()
                self.state = 712
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 714
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 715
                self.cmd_declareConst()
                self.state = 716
                self.symbol()
                self.state = 717
                self.sort()
                self.state = 718
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 720
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 721
                self.cmd_declareDatatype()
                self.state = 722
                self.symbol()
                self.state = 723
                self.datatype_dec()
                self.state = 724
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 726
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 727
                self.cmd_declareDatatypes()
                self.state = 728
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 730 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 729
                    self.sort_dec()
                    self.state = 732 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 734
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 735
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 737 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 736
                    self.datatype_dec()
                    self.state = 739 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 741
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 742
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 744
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 745
                self.cmd_declareFun()
                self.state = 746
                self.symbol()
                self.state = 747
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol:
                    self.state = 748
                    self.sort()
                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 754
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 755
                self.sort()
                self.state = 756
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 758
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 759
                self.cmd_declareSort()
                self.state = 760
                self.symbol()
                self.state = 761
                self.numeral()
                self.state = 762
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 764
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 765
                self.cmd_defineFun()
                self.state = 766
                self.function_def()
                self.state = 767
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 769
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 770
                self.cmd_defineFunRec()
                self.state = 771
                self.function_def()
                self.state = 772
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 774
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 775
                self.cmd_defineFunsRec()
                self.state = 776
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 778 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 777
                    self.function_dec()
                    self.state = 780 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 782
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 783
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 785 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 784
                    self.term()
                    self.state = 787 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0)):
                        break

                self.state = 789
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 790
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 792
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 793
                self.cmd_defineSort()
                self.state = 794
                self.symbol()
                self.state = 795
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol:
                    self.state = 796
                    self.symbol()
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 802
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 803
                self.sort()
                self.state = 804
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 806
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 807
                self.cmd_echo()
                self.state = 808
                self.string()
                self.state = 809
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 811
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 812
                self.cmd_exit()
                self.state = 813
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 815
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 816
                self.cmd_getAssertions()
                self.state = 817
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 819
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 820
                self.cmd_getAssignment()
                self.state = 821
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 823
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 824
                self.cmd_getInfo()
                self.state = 825
                self.info_flag()
                self.state = 826
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 828
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 829
                self.cmd_getModel()
                self.state = 830
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 832
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 833
                self.cmd_getOption()
                self.state = 834
                self.keyword()
                self.state = 835
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 837
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 838
                self.cmd_getProof()
                self.state = 839
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 841
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 842
                self.cmd_getUnsatAssumptions()
                self.state = 843
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 845
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 846
                self.cmd_getUnsatCore()
                self.state = 847
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 849
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 850
                self.cmd_getValue()
                self.state = 851
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 853 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 852
                    self.term()
                    self.state = 855 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0)):
                        break

                self.state = 857
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 858
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 860
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 861
                self.cmd_pop()
                self.state = 862
                self.numeral()
                self.state = 863
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 865
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 866
                self.cmd_push()
                self.state = 867
                self.numeral()
                self.state = 868
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 870
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 871
                self.cmd_reset()
                self.state = 872
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 874
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 875
                self.cmd_resetAssertions()
                self.state = 876
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 878
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 879
                self.cmd_setInfo()
                self.state = 880
                self.attribute()
                self.state = 881
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 883
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 884
                self.cmd_setLogic()
                self.state = 885
                self.symbol()
                self.state = 886
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 888
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 889
                self.cmd_setOption()
                self.state = 890
                self.option()
                self.state = 891
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class B_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_True(self):
            return self.getToken(SMTLIBv2Parser.PS_True, 0)

        def PS_False(self):
            return self.getToken(SMTLIBv2Parser.PS_False, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_b_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB_value" ):
                listener.enterB_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB_value" ):
                listener.exitB_value(self)




    def b_value(self):

        localctx = SMTLIBv2Parser.B_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_b_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            _la = self._input.LA(1)
            if not(_la==SMTLIBv2Parser.PS_False or _la==SMTLIBv2Parser.PS_True):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_DiagnosticOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_GlobalDeclarations(self):
            return self.getToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0)

        def b_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.B_valueContext,0)


        def PK_InteractiveMode(self):
            return self.getToken(SMTLIBv2Parser.PK_InteractiveMode, 0)

        def PK_PrintSuccess(self):
            return self.getToken(SMTLIBv2Parser.PK_PrintSuccess, 0)

        def PK_ProduceAssertions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssertions, 0)

        def PK_ProduceAssignments(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceAssignments, 0)

        def PK_ProduceModels(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceModels, 0)

        def PK_ProduceProofs(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceProofs, 0)

        def PK_ProduceUnsatAssumptions(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0)

        def PK_ProduceUnsatCores(self):
            return self.getToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0)

        def PK_RandomSeed(self):
            return self.getToken(SMTLIBv2Parser.PK_RandomSeed, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def PK_RegularOutputChannel(self):
            return self.getToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0)

        def PK_ReproducibleResourceLimit(self):
            return self.getToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0)

        def PK_Verbosity(self):
            return self.getToken(SMTLIBv2Parser.PK_Verbosity, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)




    def option(self):

        localctx = SMTLIBv2Parser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_option)
        try:
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(SMTLIBv2Parser.PK_DiagnosticOutputChannel)
                self.state = 898
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.match(SMTLIBv2Parser.PK_GlobalDeclarations)
                self.state = 900
                self.b_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 901
                self.match(SMTLIBv2Parser.PK_InteractiveMode)
                self.state = 902
                self.b_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(SMTLIBv2Parser.PK_PrintSuccess)
                self.state = 904
                self.b_value()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 905
                self.match(SMTLIBv2Parser.PK_ProduceAssertions)
                self.state = 906
                self.b_value()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.match(SMTLIBv2Parser.PK_ProduceAssignments)
                self.state = 908
                self.b_value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 909
                self.match(SMTLIBv2Parser.PK_ProduceModels)
                self.state = 910
                self.b_value()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 911
                self.match(SMTLIBv2Parser.PK_ProduceProofs)
                self.state = 912
                self.b_value()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 913
                self.match(SMTLIBv2Parser.PK_ProduceUnsatAssumptions)
                self.state = 914
                self.b_value()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 915
                self.match(SMTLIBv2Parser.PK_ProduceUnsatCores)
                self.state = 916
                self.b_value()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 917
                self.match(SMTLIBv2Parser.PK_RandomSeed)
                self.state = 918
                self.numeral()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 919
                self.match(SMTLIBv2Parser.PK_RegularOutputChannel)
                self.state = 920
                self.string()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 921
                self.match(SMTLIBv2Parser.PK_ReproducibleResourceLimit)
                self.state = 922
                self.numeral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 923
                self.match(SMTLIBv2Parser.PK_Verbosity)
                self.state = 924
                self.numeral()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 925
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Info_flagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AllStatistics(self):
            return self.getToken(SMTLIBv2Parser.PK_AllStatistics, 0)

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def keyword(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.KeywordContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_info_flag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_flag" ):
                listener.enterInfo_flag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_flag" ):
                listener.exitInfo_flag(self)




    def info_flag(self):

        localctx = SMTLIBv2Parser.Info_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_info_flag)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.match(SMTLIBv2Parser.PK_AllStatistics)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.match(SMTLIBv2Parser.PK_AssertionStackLevels)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self.match(SMTLIBv2Parser.PK_Authors)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 931
                self.match(SMTLIBv2Parser.PK_ErrorBehaviour)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 932
                self.match(SMTLIBv2Parser.PK_Name)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 933
                self.match(SMTLIBv2Parser.PK_ReasonUnknown)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 934
                self.match(SMTLIBv2Parser.PK_Version)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 935
                self.keyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_behaviourContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_ImmediateExit(self):
            return self.getToken(SMTLIBv2Parser.PS_ImmediateExit, 0)

        def PS_ContinuedExecution(self):
            return self.getToken(SMTLIBv2Parser.PS_ContinuedExecution, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_error_behaviour

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_behaviour" ):
                listener.enterError_behaviour(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_behaviour" ):
                listener.exitError_behaviour(self)




    def error_behaviour(self):

        localctx = SMTLIBv2Parser.Error_behaviourContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_error_behaviour)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            _la = self._input.LA(1)
            if not(_la==SMTLIBv2Parser.PS_ContinuedExecution or _la==SMTLIBv2Parser.PS_ImmediateExit):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reason_unknownContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Memout(self):
            return self.getToken(SMTLIBv2Parser.PS_Memout, 0)

        def PS_Incomplete(self):
            return self.getToken(SMTLIBv2Parser.PS_Incomplete, 0)

        def s_expr(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_reason_unknown

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReason_unknown" ):
                listener.enterReason_unknown(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReason_unknown" ):
                listener.exitReason_unknown(self)




    def reason_unknown(self):

        localctx = SMTLIBv2Parser.Reason_unknownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_reason_unknown)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.match(SMTLIBv2Parser.PS_Memout)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(SMTLIBv2Parser.PS_Incomplete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.s_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParOpen)
            else:
                return self.getToken(SMTLIBv2Parser.ParOpen, i)

        def CMD_DefineFun(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFun, 0)

        def function_def(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Function_defContext,0)


        def ParClose(self, i:int=None):
            if i is None:
                return self.getTokens(SMTLIBv2Parser.ParClose)
            else:
                return self.getToken(SMTLIBv2Parser.ParClose, i)

        def CMD_DefineFunRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunRec, 0)

        def CMD_DefineFunsRec(self):
            return self.getToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0)

        def function_dec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Function_decContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Function_decContext,i)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_response" ):
                listener.enterModel_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_response" ):
                listener.exitModel_response(self)




    def model_response(self):

        localctx = SMTLIBv2Parser.Model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_model_response)
        self._la = 0 # Token type
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 946
                self.match(SMTLIBv2Parser.CMD_DefineFun)
                self.state = 947
                self.function_def()
                self.state = 948
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 951
                self.match(SMTLIBv2Parser.CMD_DefineFunRec)
                self.state = 952
                self.function_def()
                self.state = 953
                self.match(SMTLIBv2Parser.ParClose)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 955
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 956
                self.match(SMTLIBv2Parser.CMD_DefineFunsRec)
                self.state = 957
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 959 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 958
                    self.function_dec()
                    self.state = 961 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SMTLIBv2Parser.ParOpen):
                        break

                self.state = 963
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 964
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 966 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 965
                    self.term()
                    self.state = 968 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0)):
                        break

                self.state = 970
                self.match(SMTLIBv2Parser.ParClose)
                self.state = 971
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Info_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PK_AssertionStackLevels(self):
            return self.getToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0)

        def numeral(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.NumeralContext,0)


        def PK_Authors(self):
            return self.getToken(SMTLIBv2Parser.PK_Authors, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def PK_ErrorBehaviour(self):
            return self.getToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0)

        def error_behaviour(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Error_behaviourContext,0)


        def PK_Name(self):
            return self.getToken(SMTLIBv2Parser.PK_Name, 0)

        def PK_ReasonUnknown(self):
            return self.getToken(SMTLIBv2Parser.PK_ReasonUnknown, 0)

        def reason_unknown(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Reason_unknownContext,0)


        def PK_Version(self):
            return self.getToken(SMTLIBv2Parser.PK_Version, 0)

        def attribute(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.AttributeContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfo_response" ):
                listener.enterInfo_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfo_response" ):
                listener.exitInfo_response(self)




    def info_response(self):

        localctx = SMTLIBv2Parser.Info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_info_response)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(SMTLIBv2Parser.PK_AssertionStackLevels)
                self.state = 976
                self.numeral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.match(SMTLIBv2Parser.PK_Authors)
                self.state = 978
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(SMTLIBv2Parser.PK_ErrorBehaviour)
                self.state = 980
                self.error_behaviour()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 981
                self.match(SMTLIBv2Parser.PK_Name)
                self.state = 982
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 983
                self.match(SMTLIBv2Parser.PK_ReasonUnknown)
                self.state = 984
                self.reason_unknown()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 985
                self.match(SMTLIBv2Parser.PK_Version)
                self.state = 986
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 987
                self.attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valuation_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuation_pair" ):
                listener.enterValuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuation_pair" ):
                listener.exitValuation_pair(self)




    def valuation_pair(self):

        localctx = SMTLIBv2Parser.Valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 991
            self.term()
            self.state = 992
            self.term()
            self.state = 993
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_valuation_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def symbol(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,0)


        def b_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.B_valueContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_t_valuation_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterT_valuation_pair" ):
                listener.enterT_valuation_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitT_valuation_pair" ):
                listener.exitT_valuation_pair(self)




    def t_valuation_pair(self):

        localctx = SMTLIBv2Parser.T_valuation_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_t_valuation_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 996
            self.symbol()
            self.state = 997
            self.b_value()
            self.state = 998
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_sat_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Sat(self):
            return self.getToken(SMTLIBv2Parser.PS_Sat, 0)

        def PS_Unsat(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsat, 0)

        def PS_Unknown(self):
            return self.getToken(SMTLIBv2Parser.PS_Unknown, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_check_sat_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_sat_response" ):
                listener.enterCheck_sat_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_sat_response" ):
                listener.exitCheck_sat_response(self)




    def check_sat_response(self):

        localctx = SMTLIBv2Parser.Check_sat_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_check_sat_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Echo_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_echo_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_response" ):
                listener.enterEcho_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_response" ):
                listener.exitEcho_response(self)




    def echo_response(self):

        localctx = SMTLIBv2Parser.Echo_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_echo_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_assertions_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.TermContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.TermContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_assertions_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assertions_response" ):
                listener.enterGet_assertions_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assertions_response" ):
                listener.exitGet_assertions_response(self)




    def get_assertions_response(self):

        localctx = SMTLIBv2Parser.Get_assertions_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_get_assertions_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.ParOpen) | (1 << SMTLIBv2Parser.String) | (1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SMTLIBv2Parser.Numeral - 66)) | (1 << (SMTLIBv2Parser.Binary - 66)) | (1 << (SMTLIBv2Parser.HexDecimal - 66)) | (1 << (SMTLIBv2Parser.Decimal - 66)) | (1 << (SMTLIBv2Parser.UndefinedSymbol - 66)))) != 0):
                self.state = 1005
                self.term()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_assignment_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def t_valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.T_valuation_pairContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.T_valuation_pairContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_assignment_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_assignment_response" ):
                listener.enterGet_assignment_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_assignment_response" ):
                listener.exitGet_assignment_response(self)




    def get_assignment_response(self):

        localctx = SMTLIBv2Parser.Get_assignment_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_get_assignment_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 1014
                self.t_valuation_pair()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1020
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_info_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def info_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Info_responseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Info_responseContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_info_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_info_response" ):
                listener.enterGet_info_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_info_response" ):
                listener.exitGet_info_response(self)




    def get_info_response(self):

        localctx = SMTLIBv2Parser.Get_info_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_get_info_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1024 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1023
                self.info_response()
                self.state = 1026 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SMTLIBv2Parser.Colon - 70)) | (1 << (SMTLIBv2Parser.PK_AllStatistics - 70)) | (1 << (SMTLIBv2Parser.PK_AssertionStackLevels - 70)) | (1 << (SMTLIBv2Parser.PK_Authors - 70)) | (1 << (SMTLIBv2Parser.PK_Category - 70)) | (1 << (SMTLIBv2Parser.PK_Chainable - 70)) | (1 << (SMTLIBv2Parser.PK_Definition - 70)) | (1 << (SMTLIBv2Parser.PK_DiagnosticOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ErrorBehaviour - 70)) | (1 << (SMTLIBv2Parser.PK_Extension - 70)) | (1 << (SMTLIBv2Parser.PK_Funs - 70)) | (1 << (SMTLIBv2Parser.PK_FunsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_GlobalDeclarations - 70)) | (1 << (SMTLIBv2Parser.PK_InteractiveMode - 70)) | (1 << (SMTLIBv2Parser.PK_Language - 70)) | (1 << (SMTLIBv2Parser.PK_LeftAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_License - 70)) | (1 << (SMTLIBv2Parser.PK_Named - 70)) | (1 << (SMTLIBv2Parser.PK_Name - 70)) | (1 << (SMTLIBv2Parser.PK_Notes - 70)) | (1 << (SMTLIBv2Parser.PK_Pattern - 70)) | (1 << (SMTLIBv2Parser.PK_PrintSuccess - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssertions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceAssignments - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceModels - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceProofs - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatAssumptions - 70)) | (1 << (SMTLIBv2Parser.PK_ProduceUnsatCores - 70)) | (1 << (SMTLIBv2Parser.PK_RandomSeed - 70)) | (1 << (SMTLIBv2Parser.PK_ReasonUnknown - 70)) | (1 << (SMTLIBv2Parser.PK_RegularOutputChannel - 70)) | (1 << (SMTLIBv2Parser.PK_ReproducibleResourceLimit - 70)) | (1 << (SMTLIBv2Parser.PK_RightAssoc - 70)) | (1 << (SMTLIBv2Parser.PK_SmtLibVersion - 70)) | (1 << (SMTLIBv2Parser.PK_Sorts - 70)) | (1 << (SMTLIBv2Parser.PK_SortsDescription - 70)) | (1 << (SMTLIBv2Parser.PK_Source - 70)) | (1 << (SMTLIBv2Parser.PK_Status - 70)) | (1 << (SMTLIBv2Parser.PK_Theories - 70)) | (1 << (SMTLIBv2Parser.PK_Values - 70)) | (1 << (SMTLIBv2Parser.PK_Verbosity - 70)) | (1 << (SMTLIBv2Parser.PK_Version - 70)))) != 0)):
                    break

            self.state = 1028
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_model_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def model_response(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Model_responseContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Model_responseContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_model_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_model_response" ):
                listener.enterGet_model_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_model_response" ):
                listener.exitGet_model_response(self)




    def get_model_response(self):

        localctx = SMTLIBv2Parser.Get_model_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_get_model_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SMTLIBv2Parser.ParOpen:
                self.state = 1031
                self.model_response()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_option_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_value(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Attribute_valueContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_option_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_option_response" ):
                listener.enterGet_option_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_option_response" ):
                listener.exitGet_option_response(self)




    def get_option_response(self):

        localctx = SMTLIBv2Parser.Get_option_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_get_option_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.attribute_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_proof_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_expr(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.S_exprContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_proof_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_proof_response" ):
                listener.enterGet_proof_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_proof_response" ):
                listener.exitGet_proof_response(self)




    def get_proof_response(self):

        localctx = SMTLIBv2Parser.Get_proof_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_get_proof_response)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.s_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_unsat_assump_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_unsat_assump_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_assump_response" ):
                listener.enterGet_unsat_assump_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_assump_response" ):
                listener.exitGet_unsat_assump_response(self)




    def get_unsat_assump_response(self):

        localctx = SMTLIBv2Parser.Get_unsat_assump_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_get_unsat_assump_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol:
                self.state = 1044
                self.symbol()
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1050
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_unsat_core_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.SymbolContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.SymbolContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_unsat_core_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_unsat_core_response" ):
                listener.enterGet_unsat_core_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_unsat_core_response" ):
                listener.exitGet_unsat_core_response(self)




    def get_unsat_core_response(self):

        localctx = SMTLIBv2Parser.Get_unsat_core_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_get_unsat_core_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SMTLIBv2Parser.QuotedSymbol) | (1 << SMTLIBv2Parser.PS_Not) | (1 << SMTLIBv2Parser.PS_Bool) | (1 << SMTLIBv2Parser.PS_ContinuedExecution) | (1 << SMTLIBv2Parser.PS_Error) | (1 << SMTLIBv2Parser.PS_False) | (1 << SMTLIBv2Parser.PS_ImmediateExit) | (1 << SMTLIBv2Parser.PS_Incomplete) | (1 << SMTLIBv2Parser.PS_Logic) | (1 << SMTLIBv2Parser.PS_Memout) | (1 << SMTLIBv2Parser.PS_Sat) | (1 << SMTLIBv2Parser.PS_Success) | (1 << SMTLIBv2Parser.PS_Theory) | (1 << SMTLIBv2Parser.PS_True) | (1 << SMTLIBv2Parser.PS_Unknown) | (1 << SMTLIBv2Parser.PS_Unsupported) | (1 << SMTLIBv2Parser.PS_Unsat))) != 0) or _la==SMTLIBv2Parser.UndefinedSymbol:
                self.state = 1053
                self.symbol()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1059
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_value_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def valuation_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SMTLIBv2Parser.Valuation_pairContext)
            else:
                return self.getTypedRuleContext(SMTLIBv2Parser.Valuation_pairContext,i)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_get_value_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_value_response" ):
                listener.enterGet_value_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_value_response" ):
                listener.exitGet_value_response(self)




    def get_value_response(self):

        localctx = SMTLIBv2Parser.Get_value_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_get_value_response)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(SMTLIBv2Parser.ParOpen)
            self.state = 1063 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1062
                self.valuation_pair()
                self.state = 1065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SMTLIBv2Parser.ParOpen):
                    break

            self.state = 1067
            self.match(SMTLIBv2Parser.ParClose)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Specific_success_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def check_sat_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Check_sat_responseContext,0)


        def echo_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Echo_responseContext,0)


        def get_assertions_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_assertions_responseContext,0)


        def get_assignment_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_assignment_responseContext,0)


        def get_info_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_info_responseContext,0)


        def get_model_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_model_responseContext,0)


        def get_option_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_option_responseContext,0)


        def get_proof_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_proof_responseContext,0)


        def get_unsat_assump_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_unsat_assump_responseContext,0)


        def get_unsat_core_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_unsat_core_responseContext,0)


        def get_value_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Get_value_responseContext,0)


        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_specific_success_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_success_response" ):
                listener.enterSpecific_success_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_success_response" ):
                listener.exitSpecific_success_response(self)




    def specific_success_response(self):

        localctx = SMTLIBv2Parser.Specific_success_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_specific_success_response)
        try:
            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.check_sat_response()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self.echo_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.get_assertions_response()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1072
                self.get_assignment_response()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1073
                self.get_info_response()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1074
                self.get_model_response()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1075
                self.get_option_response()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1076
                self.get_proof_response()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1077
                self.get_unsat_assump_response()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1078
                self.get_unsat_core_response()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1079
                self.get_value_response()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_responseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PS_Success(self):
            return self.getToken(SMTLIBv2Parser.PS_Success, 0)

        def specific_success_response(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.Specific_success_responseContext,0)


        def PS_Unsupported(self):
            return self.getToken(SMTLIBv2Parser.PS_Unsupported, 0)

        def ParOpen(self):
            return self.getToken(SMTLIBv2Parser.ParOpen, 0)

        def PS_Error(self):
            return self.getToken(SMTLIBv2Parser.PS_Error, 0)

        def string(self):
            return self.getTypedRuleContext(SMTLIBv2Parser.StringContext,0)


        def ParClose(self):
            return self.getToken(SMTLIBv2Parser.ParClose, 0)

        def getRuleIndex(self):
            return SMTLIBv2Parser.RULE_general_response

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_response" ):
                listener.enterGeneral_response(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_response" ):
                listener.exitGeneral_response(self)




    def general_response(self):

        localctx = SMTLIBv2Parser.General_responseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_general_response)
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.match(SMTLIBv2Parser.PS_Success)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.specific_success_response()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.match(SMTLIBv2Parser.PS_Unsupported)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1085
                self.match(SMTLIBv2Parser.ParOpen)
                self.state = 1086
                self.match(SMTLIBv2Parser.PS_Error)
                self.state = 1087
                self.string()
                self.state = 1088
                self.match(SMTLIBv2Parser.ParClose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





